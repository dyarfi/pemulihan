<?php defined('SYSPATH') or die('No direct script access.');/** * Author       : Daniel Simangunsong * Code Name    : Blugol * Copywrigth   : 2011 * Module       : ~ * Package      : Helper**/  class helper_common {    public static function uploadFile($config=array(),$chmod=0755){        /**         * Return Level         * 1. Success         * 501. Failed when upload         * 502. Empty Source         * 503. Forbidden Source         * 504. Failed dimension ...         *          * Config Param         * $config['src'] = Form File Name (String)         * $config['dest'] = Destination full path (String)         * $config['allowed'] = Allowed File To Upload ( Array ) eg. array ('jpeg','jpg')         * $config['name'] = Use to describe SPESIFIC FILE NAME rather than use POST FILE NAME.         **/        $truesize   = empty($config['truesize']) ? 'no'  : 'yes';        $unlink     = empty($config['unlink'])   ? 'yes' : 'no';        $removed = empty($config['removed']) ? 'yes' : 'no';        $src = $config['src'];        $dest = $config['dest'];        if (empty($_FILES["$src"]["name"])) return 502;        $file_ext = strtolower(Upload::get_extension($_FILES["$src"]['name']));        if (!empty($config['allowed'])) :             $allowed = $config['allowed'];                       if (!in_array($file_ext,$allowed)) return 503;        endif;        $name = empty($config["name"]) ? $_FILES["$src"]["name"] : $config['name'].'.'.$file_ext;        if (!is_dir($dest)) {            mkdir($dest,$chmod);        }        if(Upload::save($_FILES["$src"],$name,$dest,$chmod)):            // Check Image Width            if (!empty($config['width']) || !empty($config['height'])):                $imageopen = Image::factory($dest.$name);                  if ($truesize=='yes'):                    if ( $imageopen->width != $config['width'] || $imageopen->height != $config['height'] ):                        if ($unlink == 'yes'): unlink($dest.$name); endif;                        return 504;                    endif;                else:                    if ( $imageopen->width > $config['width'] || $imageopen->height > $config['height']):                        if ($unlink == 'yes'): unlink($dest.$name); endif;                        return 504;                    endif;                endif;                if (!empty($config['move_dest'])):                    $imageopen->save($config['move_dest'].$name);                    unlink($dest.$name);                endif;            endif;            // Resize Dimention ... only for image            if (!empty($config['rwidth']) || !empty($config['rheight'])):                $imageopen = Image::factory($dest.$name);                if (!empty($config['ratio'])):                                        if( $imageopen->width > $imageopen->height )    : $ratio_by = Image::HEIGHT; endif;                    if( $imageopen->width < $imageopen->height )    : $ratio_by = Image::WIDTH; endif;                                if( $imageopen->width === $imageopen->height )  : $ratio_by = Image::AUTO; endif;                else:                    $ratio_by = Image::NONE;                endif;                 $imageopen->resize($config['rwidth'],$config['rheight'],$ratio_by);                if (!empty($config['rwidth']) && !empty($config['rheight'])){                    $imageopen->crop($config['rwidth'],$config['rheight']);                }                if (!empty($config['move_dest'])):                    $imageopen->save($config['move_dest'].$name);                    unlink($dest.$name);                else:                    $imageopen->save();                endif;                      endif;            return $name;        else:            return 501;        endif;    }    public static function move_image($src=null,$dest=null,$name=null,$unlink=true) {        if ( empty($dest) && empty($src) && empty($name)):            return null;        endif;        if (file_exists($src)):              $dest = empty($name) ? $dest : $dest.'/'.$name;            $imageopen = Image::factory($src);            $imageopen->save($dest);            if ($unlink):                unlink($src);            endif;        endif;    }    public static function currency ($src,$cur='id',$decimals='2') {        $prefix = 'Rp. ';        return $prefix.number_format($src,$decimals,',','.');    }    public static function print_r($array){        return '<pre>'.print_r($array,true).'</pre>';    }    public static function formatTime($datetime,$format){        $splitDateTime = explode (' ',$datetime);        if (!empty($splitDateTime[0])){            $splitdate = explode('-',$splitDateTime[0]);           }        if (!empty($splitDateTime[1])){            $splittime = explode(':',$splitDateTime[1]);           }        $year = empty($splitdate[0]) ? $splitdate[0] : date('Y');        $month = empty($splitdate[1]) ? $splitdate[1] : date('m');        $day = empty($splitdate[2]) ? $splitdate[2] : date('d');        $hour = empty($splittime[0]) ? $splittime[0] : date('h');        $minute = empty($splittime[1]) ? $splittime[1] : date('i');        $second = empty($splittime[2]) ? $splittime[2] : date('s');        return date($format,mktime($hour,$minute,$second,$month,$day,$year));    }     public static function formatDate($date = null,$format){        $splitdate = array(); $splittime = array();         if (isset($date)){            $splitdate = explode('-',$date);           }        $year = empty($splitdate[0]) ? $splitdate[0] : date('Y');        $month = empty($splitdate[1]) ? $splitdate[1] : date('m');        $day = empty($splitdate[2]) ? $splitdate[2] : date('d');        return date($format,mktime(23,59,59,$month,$day,$year));    }     public static function convertTime($time,$format){        return date($format,$time);    }    public static function label($src,$replacewidth='',$replacewhat='type') {        return str_replace("%$replacewhat",$replacewidth,$src);    }    public static function getBrowser($return=null)   {         $u_agent = $_SERVER['HTTP_USER_AGENT'];         $bname = 'Unknown';        $platform = 'Unknown';        $version= "";        //First get the platform?        if (preg_match('/linux/i', $u_agent)) {            $platform = 'linux';        }        elseif (preg_match('/macintosh|mac os x/i', $u_agent)) {            $platform = 'mac';        }        elseif (preg_match('/windows|win32/i', $u_agent)) {            $platform = 'windows';        }        // Next get the name of the useragent yes seperately and for good reason        if(preg_match('/MSIE/i',$u_agent) && !preg_match('/Opera/i',$u_agent))         {             $bname = 'Internet Explorer';             $ub = "MSIE";         }         elseif(preg_match('/Firefox/i',$u_agent))         {             $bname = 'Mozilla Firefox';             $ub = "Firefox";         }         elseif(preg_match('/Chrome/i',$u_agent))         {             $bname = 'Google Chrome';             $ub = "Chrome";         }         elseif(preg_match('/Safari/i',$u_agent))         {             $bname = 'Apple Safari';             $ub = "Safari";         }         elseif(preg_match('/Opera/i',$u_agent))         {             $bname = 'Opera';             $ub = "Opera";         }         elseif(preg_match('/Netscape/i',$u_agent))         {             $bname = 'Netscape';             $ub = "Netscape";         }         // finally get the correct version number        $known = array('Version', $ub, 'other');        $pattern = '#(?<browser>' . join('|', $known) .        ')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';        if (!preg_match_all($pattern, $u_agent, $matches)) {            // we have no matching number just continue        }        // see how many we have        $i = count($matches['browser']);        if ($i != 1) {            //we will have two since we are not using 'other' argument yet            //see if version is before or after the name            if (strripos($u_agent,"Version") < strripos($u_agent,$ub)){                $version= $matches['version'][0];            }            else {                $version= $matches['version'][1];            }        }        else {            $version= $matches['version'][0];        }        // check if we have a number        if ($version==null || $version=="") {$version="?";}        return isset($return)             ? $$return :             array(                'userAgent' => $u_agent,                'name'      => $bname,                'version'   => $version,                'platform'  => $platform,                'pattern'    => $pattern            );    }     public static function recursive_remove_directory($directory, $empty=FALSE) {        if(substr($directory,-1) == '/') :            $directory = substr($directory,0,-1);        endif;        if(!file_exists($directory) || !is_dir($directory)) :            return FALSE;        elseif(is_readable($directory)) :            $handle = opendir($directory);            while (FALSE !== ($item = readdir($handle))) :                if($item != '.' && $item != '..') :                    $path = $directory.'/'.$item;                        if(is_dir($path)) :                            Helper_Common::recursive_remove_directory($path);                        else:                            unlink($path);                        endif;                endif;            endwhile;            closedir($handle);            if($empty == FALSE) :                if(!rmdir($directory)):                    return FALSE;                       endif;            endif;        endif;        return TRUE;    }    public static function encript($src){        $hash = 'batak_source';        return md5($src.' '.$hash);    }    public static function stringtourl($string=''){        $return = strtolower(str_replace(array(' ','.','/','\\'),'-',$string));        return str_replace(array('-&amp;-','-&-'),'-',$return);    }    public static function randomstring($format='n-n-a-a-n') { // n: numeric, a : alphabet        $arr_numeric    = array (0,1,2,3,4,5,6,7,8,9);        $arr_alphabet   = array ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');        $arr_format     = explode('-',$format);        $return         = null;        foreach ($arr_format as $value):            if ($value == 'n'):                $index   = rand(0,9);                $return .= $arr_numeric[$index];             else:                $index   = rand(0,25);                $return .= $arr_alphabet[$index];            endif;                    endforeach;               return $return;    }    public static function sending_email($recipient,$subject,$message,$sender) {        // To send HTML mail, the Content-type header must be set        $headers  = 'MIME-Version: 1.0' . "\r\n";        $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";		$headers .= 'From: '.$sender."\r\n".					'Reply-To: '.$sender."\r\n".					'X-Mailer: PHP/'.phpversion();        // Mail it        mail($recipient,$subject,$message,$headers);    }    public static function arr2obj($arr) {        if(!is_array($arr)):            return $arr;        endif;        $object = new stdClass();        foreach ($arr as $k=>$v):            $k = strtolower(trim($k));            if (!empty($k)):                $object->$k = helper_common::arr2obj($v);            endif;        endforeach;        return $object;    }    public static function cute_url($string,$search=null,$replace='_') {        $default_search = array(',','.',' ');        $default_search = empty($search) ? $default_search : array_merge($default_search,$search);        return strtolower(str_replace($default_search,$replace,$string));    }    public static function multi_attach_mail($to, $files, $sendermail){        // email fields: to, from, subject, and so on        $from = "Files attach <".$sendermail.">";         $subject = date("d.M H:i")." F=".count($files);         $message = date("Y.m.d H:i:s")."\n".count($files)." attachments";        $headers = "From: $from";        // boundary         $semi_rand = md5(time());         $mime_boundary = "==Multipart_Boundary_x{$semi_rand}x";         // headers for attachment         $headers .= "\nMIME-Version: 1.0\n" . "Content-Type: multipart/mixed;\n" . " boundary=\"{$mime_boundary}\"";         // multipart boundary         $message = "--{$mime_boundary}\n" . "Content-Type: text/plain; charset=\"iso-8859-1\"\n" .        "Content-Transfer-Encoding: 7bit\n\n" . $message . "\n\n";         // preparing attachments        for($i=0;$i<count($files);$i++){            if(is_file($files[$i])){                $message .= "--{$mime_boundary}\n";                $fp =    @fopen($files[$i],"rb");            $data =    @fread($fp,filesize($files[$i]));                        @fclose($fp);                $data = chunk_split(base64_encode($data));                $message .= "Content-Type: application/octet-stream; name=\"".basename($files[$i])."\"\n" .                 "Content-Description: ".basename($files[$i])."\n" .                "Content-Disposition: attachment;\n" . " filename=\"".basename($files[$i])."\"; size=".filesize($files[$i]).";\n" .                 "Content-Transfer-Encoding: base64\n\n" . $data . "\n\n";                }            }        $message .= "--{$mime_boundary}--";        $returnpath = "-f" . $sendermail;        $ok = @mail($to, $subject, $message, $headers, $returnpath);         if($ok){ return $i; } else { return 0; }    } }?>