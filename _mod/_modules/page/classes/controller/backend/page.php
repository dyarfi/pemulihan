<?php defined('SYSPATH') OR die('No direct access allowed.');class Controller_Backend_Page extends Controller_Backend_BaseAdmin {	protected $_module_name;	protected $_class_name;	protected $_search_keys;	protected $_prefs;	protected $_upload_path;	protected $page;	protected $category;	protected $categories;	protected $file;	protected $statuses;	protected $id1; 	protected $id2; 	protected $id3;		public function before () {		parent::before();		$category				= new Model_PageCategory();		$file					= new Model_PageFile();		$categories				= $category->find();		$buffers				= array();        $this->id1 				= Request::$current->param('id1');        $this->id2 				= Request::$current->param('id2');        $this->id3 				= Request::$current->param('id3');		$this->id4 				= Request::$current->param('id4');		$this->id5 				= Request::$current->param('id5');		$this->_module_name		= Request::$current->controller();		$this->_class_name		= strtolower(str_replace('Controller_Backend_', '', get_class($this)));		$this->_module_menu		= $this->acl->module_menu;		$this->_search_keys		= array('subject'		=> 'Subject',										'name'			=> 'Name',										'category_id'	=> 'Category',										'status'		=> 'Status');		$this->_prefilter_keys	= array('category_id');		$this->_prefs			= (Lib::config($this->_module_name.'.'.$this->_class_name.'_fields') !== NULL) ? Lib::config($this->_module_name.'.'.$this->_class_name.'_fields') : array();		$this->_upload_path		= (Lib::config($this->_module_name.'.upload_path') !== NULL) ? Lib::config($this->_module_name.'.upload_path') : array();		$this->_upload_url		= (Lib::config($this->_module_name.'.upload_url') !== NULL) ? Lib::config($this->_module_name.'.upload_url') : array();		$this->page				= new Model_Page();		$this->category			= new Model_PageCategory();		$this->file				= new Model_PageFile();		$this->user				= new Model_User();		foreach ($categories as $row) {			$buffers[$row->id]	= $row;		}		$this->categories		= $buffers;		$users					= $this->user->find();		$buffers				= array();		foreach ($users as $user){			$buffers[$user->id] = $user;		}		$this->_users			= $buffers;				unset($buffers);		//-- User id from user login session 'user_id'		$this->_uid				= $this->session->get('user_id');		//-- Default news statuses		$this->statuses			= array('publish',										'unpublish',										'draft');		//-- Bypassing action to ACL 		$this->acl->allow(							'download',							'exsport'						  );		unset($category, $categories, $buffers);	}		public function action_index () {		$category_id		= !empty($this->id1) ? $this->id1 : '';		$this->category->id	= $category_id;		if ($category_id != '' && !$this->category->load())			$category_id	= '';		$where_cond	= array('status !='	=> 'deleted');		if ($category_id != '')			$where_cond['category_id']	= $category_id;		/** Find & Multiple change status **/		if ($_POST) {			$post	= new Validation($_POST);			if (isset($post['field']) || isset($post['keyword'])) {				$post->rule('keyword', 'regex', array(':value', '/^[a-z_.\-]++$/iD'));				if ($post->check()) {					if (!in_array($post['field'], $this->_prefilter_keys))						$where_cond[$post['field'] . ' LIKE']	= $post['keyword'].'%';					else						$where_cond[$post['field'] . ' IN']	= call_user_func(array($this, '_'.$post['field']), $post['keyword']);					$filters	= array('f'	=> $post['field'],										'q'	=> $post['keyword']);					$this->session->set($this->_class_name.'_filter', serialize($filters));				} else if (isset($post['find'])) {					$this->session->delete($this->_class_name.'_filter');				}			}			if ($this->session->get($this->_class_name.'_filter') !== FALSE) {				$filters	= unserialize($this->session->get($this->_class_name.'_filter'));				if (in_array($filters['f'], array_keys($this->_search_keys)) && $filters['q'] != '') {					if (!in_array($filters['f'], $this->_prefilter_keys))						$where_cond[$filters['f'] . ' LIKE']	= $filters['q'].'%';					else						$where_cond[$filters['f'] . ' IN']	= call_user_func(array($this, '_'.$filters['f']), $filters['q']);				}			}		}		/** Table sorting **/		$params		= Request::$current->param();				$sorts		= array('asc', 'desc');				$sort		= isset($params['id2']) ? $this->id2 : 'subject';		$order		= isset($params['id4']) ? $this->id4 : $sorts[0];		$order_by	= array($sort => $order);		$page_index	= isset($_GET['page']) ? $_GET['page'] - 1: 0;		$per_page	= Lib::config('admin.item_per_page');			//$per_page	= 10;		$page_url	= isset($_GET['page']) ? '?page='.$_GET['page'] : '';		$offset		= ($page_index == 0) ? '' : $page_index * $per_page;		$table_headers	= array('subject'		=> 'Subject',								'category_id'	=> 'Category',								/*'count'			=> 'Views',*/								'status'		=> 'Status',								'added'			=> 'Added',								'modified'		=> 'Modified');		if (isset($params['id2']) && isset($params['id4'])) {			$headers	= array_keys($table_headers);			$sort		= (isset($params['id2']) && in_array(strtolower($params['id2']), $headers)) ? strtolower($params['id2']) : $headers[0];			$order		= (isset($params['id4']) && in_array(strtolower($params['id4']), $sorts)) ? strtolower($params['id4']) : $sorts[0];			$order_by	= array($sort=> $order);		}		if (isset($params['id3']) && isset($params['id5'])) {			$headers	= array_keys($table_headers);			$sort		= (isset($params['id3']) && in_array(strtolower($params['id3']), $headers)) ? strtolower($params['id3']) : $headers[0];			$order		= (isset($params['id5']) && in_array(strtolower($params['id5']), $sorts)) ? strtolower($params['id5']) : $sorts[0];			$order_by	= array($sort=> $order);		}		/** Execute list query **/		$field		= isset($filters['f']) ? $filters['f'] : '';		$keyword	= isset($filters['q']) ? $filters['q'] : '';		$where_cond	= isset($where_cond) ? $where_cond : '';		$total_rows	= count($this->page->find($where_cond));		$total_record 	= $total_rows;		$listings	= $this->page->find($where_cond, $order_by, $per_page, $offset);		$pagination	= Pagination::factory(array(				'total_items' 		=> $total_rows,				'items_per_page' 	=> $per_page,			 ));		/** Views **/		$content_vars		= array('listings'		=> $listings,									'table_headers'	=> $table_headers,									'statuses'		=> $this->statuses,									'search_keys'	=> $this->_search_keys,									'module_name'	=> $this->_module_name,									'class_name'	=> $this->_class_name,									'module_menu'	=> $this->_module_menu,									'total_record'	=> $total_record,												'field'			=> $field,									'keyword'		=> $keyword,									'order'			=> $order,									'sort'			=> $sort,									'page_url'		=> $page_url,									'page_index'	=> $offset,									'params'		=> $params,									'pagination'	=> $pagination,									'categories'	=> $this->categories,									'category_id'	=> $category_id);		$content			= View::factory($this->_module_name.'/backend/'.$this->_module_name.'_index');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content; 	}		public function action_add () {		$category_id = $this->id1;		$fields	= array('category_id'		=> '',						'name'				=> '',						'subject'			=> '',						'synopsis'			=> '',						'text'				=> '',						'attribute'			=> '',						'publish_date'		=> '',						'unpublish_date'	=> '',						'allow_comment'		=> '',						'tags'				=> '',						'order'				=> '',						'status'			=> '');		if (isset($this->_prefs['show_upload']) && $this->_prefs['show_upload'] && isset($this->_prefs['uploads'])) {			foreach ($this->_prefs['uploads'] as $row_name => $row_params) {				$fields[$row_name]	= '';				if (isset($row_params['caption']) && $row_params['caption'])					$fields[$row_name.'_caption']	= '';			}		}		$errors	= $fields;		$fields['category_id']	= $category_id;		if ($_POST) {			if ($_FILES)				$post	= new Validation(array_merge($_POST, $_FILES));			else				$post	= new Validation($_POST);			//$post->pre_filter('trim', 'name', 'subject');			$post->rule('subject', 'not_empty');			$post->rule('subject', 'min_length', array(':value', 4));			$post->rule('name', 'not_empty');								$post->rule('name', array($this, '_safe_html_name'), array(':validation', ':field', 'name'));			if (isset($this->_prefs['show_upload']) && $this->_prefs['show_upload'] && isset($this->_prefs['uploads'])) {				foreach ($this->_prefs['uploads'] as $row_name => $row_params) {					//if (isset($row_params['optional']) && !$row_params['optional']) {						/*$post->add_rules($row_name, 'upload::required');*/						//$post->add_rules($row_name, 'upload::valid');					//}					//if (isset($row_params['file_type']))						//$post->add_rules($row_name, 'upload::type['.$row_params['file_type'].']');					//if (isset($row_params['max_file_size']))						//$post->add_rules($row_name, 'upload::size['.$row_params['max_file_size'].']');				}			}			$post->rule('name', array($this, '_unique_name'), array(':validation', ':field', 'name'));			if ($post->check()) {				$fields	= $post->as_array();				$where_cond	= array('category_id'		=> $fields['category_id']);				$last_order	= $this->page->find_count($where_cond) + 1;				if (isset($fields['order']) && $fields['order'] < $last_order) {					$where_cond	= array('category_id'	=> $fields['category_id'],										'order >='		=> $fields['order']);					$pages	= $this->page->find($where_cond);					foreach ($pages as $row) {						$row->order	= $row->order + 1;						$row->update();					}					unset($pages);				}				$params	= array('category_id'		=> $fields['category_id'],								'name'				=> $fields['name'],								'subject'			=> $fields['subject'],								'synopsis'			=> isset($fields['synopsis']) ? $fields['synopsis'] : '',								'text'				=> $fields['text'],								'attribute'			=> isset($fields['attribute']) ? $fields['attribute'] : '',								'publish_date'		=> isset($fields['publish_date']) ? $this->_reverse_date($fields['publish_date']) : '0000-00-00',								'unpublish_date'	=> isset($fields['unpublish_date']) ? $this->_reverse_date($fields['unpublish_date']) : '0000-00-00',								'allow_comment'		=> isset($fields['allow_comment']) ? $fields['allow_comment'] : 0,								'tags'				=> isset($fields['tags']) ? $fields['tags'] : '',								'order'				=> isset($fields['order']) ? $fields['order'] : 0,					'user_id'		=> (isset($this->acl->logged_user->id)) ? $this->acl->logged_user->id : 0,								'status'			=> $fields['status']);				$id		= $this->page->add($params);				if ($id !== FALSE && isset($this->_prefs['show_upload']) && $this->_prefs['show_upload'] && isset($this->_prefs['uploads'])) {					foreach ($this->_prefs['uploads'] as $row_name => $row_params) {						//if (!upload::required($_FILES[$row_name]) || !upload::valid($_FILES[$row_name]))							//continue;						if (!Upload::not_empty($_FILES[$row_name]) || !Upload::type($_FILES[$row_name],explode(',',$row_params['file_type'])) || !Upload::valid($_FILES[$row_name]))							continue;						if (!File::exts_by_mime($post[$row_name]['type']))							continue;						$file_hash	= md5(time() + rand(100, 999));						$file_data	= pathinfo($_FILES[$row_name]['name']);						$file_name	= Lib::_upload_to($post[$row_name], $file_hash.'.'.$file_data['extension'], $this->_upload_path, 0755);						$file_data	= pathinfo($file_name);						$file_mime	= $_FILES[$row_name]['type'];						if ($file_name != '' && isset($this->_prefs['uploads'][$row_name]['image_manipulation'])) {							$params			= array('page_id'	=> $id,													'field_name'	=> $row_name,													'file_name'		=> $file_data['basename'],													'file_type'		=> $file_mime,													'caption'		=> isset($fields[$row_name.'_caption']) ? $fields[$row_name.'_caption'] : '');							$this->file->add($params);						}					}				}				if (isset($_POST['add_another'])) {					$this->request->redirect('admin-cp/'.$this->_class_name.'/add');					return;				}				$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$id);				return;			} else {				$fields		= Arr::overwrite($fields, $post->as_array());				$errors 	= Arr::overwrite($errors, $post->errors('validation'));				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '') {						$buffers[$row_key]	= Lib::config('admin.error_field_open').ucfirst($row_val).Lib::config('admin.error_field_close');					} else {						$buffers[$row_key]	= $row_val;					}				}				$errors		= $buffers;			}		}		/** Generate Thumbnails **/		Lib::_auto_image_manipulation($this->_upload_path, $this->file, $this->_prefs);		/** Views **/		$where_cond			= array('status !='		=> 'deleted');		$order_by			= array('category_id'	=> 'ASC',									'order'			=> 'ASC');		$orders				= $this->page->find($where_cond, $order_by);		$content_vars		= array('errors'		=> $errors,									'fields'		=> $fields,									'categories'	=> $this->categories,									'orders'		=> $orders,									'statuses'		=> $this->statuses,									'module_name' 	=> $this->_module_name,									'module_menu'	=> $this->_module_menu);		$content_vars		= array_merge($content_vars, $this->_prefs);		$content			= View::factory($this->_module_name.'/backend/'.$this->_module_name.'_add');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content; 	}		public function action_view () {		$id = $this->id1;		$category_id = $this->id2;		$this->page->id	= $id;		if (!$this->page->load()) {			$this->request->redirect('admin-cp/'.$this->_class_name.'/error/invalid_request');			return;		}		/** Views **/		if ($this->page->category_id != 0) {			$category		= $this->category->load($this->page->category_id);			$category		= HTML::chars($category->title, TRUE);		} else {			$category		= 'This page doesn\'t have category';		}		if ($this->page->order == 0) {			$order			= '-';		} else if ($this->page->order != 1) {			$where_cond		= array('category_id'	=> $this->page->category_id,									'order'			=> ($this->page->order - 1));			$pages		= $this->page->find($where_cond, '', 1);			if (isset($pages[0]))				$order		= 'After category '.HTML::chars($pages[0]->subject, TRUE);			else				$order		= '';		} else {			$order			= 'At the beginning';		}		$where_cond			= array('page_id'	=> $this->page->id);		$files				= $this->file->find($where_cond);		$buffers			= array();		foreach ($files as $row) {			$buffers[$row->field_name]	= $row;		}		$files				= $buffers;		unset($buffers);		/** Generate Thumbnails **/		Lib::_auto_image_manipulation($this->_upload_path, $this->file, $this->_prefs);		/** Views **/		$content_vars		= array('page'		=> $this->page,									'category'		=> $category,									'files'			=> $files,									'order'			=> $order,									'readable_mime'	=> Lib::config($this->_module_name.'.readable_mime'),									'category_id'	=> $category_id,									'module_name' => $this->_module_name,									'module_menu'	=> $this->_module_menu,);		$content_vars		= array_merge($content_vars, $this->_prefs);		$content			= View::factory($this->_module_name.'/backend/'.$this->_module_name.'_view');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content; 	}		public function action_edit () {		//print_r($_POST); exit();		$id = $this->id1;		$category_id = $this->id2;		$this->page->id	= $id;		if (!$this->page->load()) {			$this->request->redirect('admin-cp/'.$this->_class_name.'/error/invalid_request');			return;		}		$fields	= array('category_id'		=> '',						'name'				=> '',						'subject'			=> '',						'synopsis'			=> '',						'text'				=> '',						'attribute'			=> '',						'publish_date'		=> '',						'unpublish_date'	=> '',						'allow_comment'		=> '',						'tags'				=> '',						'order'				=> '',						'status'			=> '');		if (isset($this->_prefs['show_upload']) && $this->_prefs['show_upload'] && isset($this->_prefs['uploads'])) {			foreach ($this->_prefs['uploads'] as $row_name => $row_params) {				$fields[$row_name]	= '';				if (isset($row_params['caption']) && $row_params['caption'])					$fields[$row_name.'_caption']	= '';			}		}		$errors	= $fields;		if ($_POST) {			if ($_FILES)				$post	= new Validation(array_merge($_POST, $_FILES));			else				$post	= new Validation($_POST);			//$post->pre_filter('trim', 'name', 'subject');			//$post->pre_filter(array($this, '_safe_html_name'), 'name');			if (isset($this->_prefs['show_upload']) && $this->_prefs['show_upload'] && isset($this->_prefs['uploads'])) {				foreach ($this->_prefs['uploads'] as $row_name => $row_params) {					// if (isset($row_params['file_type']))						// $post->add_rules($row_name, 'upload::type['.$row_params['file_type'].']');					// if (isset($row_params['max_file_size']))						// $post->add_rules($row_name, 'upload::size['.$row_params['max_file_size'].']');					if (!File::exts_by_mime($post[$row_name]['type']))						continue;					}			}			// $post->add_callbacks('name', array($this, '_unique_name'));//			/print_r($fields['category_id']); exit(			//print_r($_POST); exit();			$fields['category_id'] = (empty($fields['category_id'])) ? '0' : $fields['category_id'];			if ($post->check()) {				$fields	= $post->as_array();				$order		= (@$fields['order'] == 1) ? @$fields['order'] : (@$fields['order'] - 1);				$where_cond	= array('category_id'	=> $fields['category_id']);				$last_order	= $this->page->find_count($where_cond) + 1;				if ($this->page->category_id != $fields['category_id']) {					$where_cond	= array('category_id'	=> $this->page->category_id,										'order >='		=> $this->page->order);					$orders		= $this->page->find($where_cond);					foreach ($orders as $row) {						$row->order	= $row->order - 1;						$row->update();					}					$where_cond	= array('category_id'	=> $fields['category_id'],										'order >='	=> $order);					$orders		= $this->page->find($where_cond);					foreach ($orders as $row) {						$row->order	= $row->order + 1;						$row->update();					}				} else {					if (@$fields['order'] == 1) {						$where_cond	= array('category_id'	=> $fields['category_id'],											'order >='		=> $order,											'order <='		=> $this->page->order,											'status !='		=> 'deleted');						$orders		= $this->page->find($where_cond);						foreach ($orders as $row) {							$row->order	= $row->order + 1;							$row->update();						}					} else if ($this->page->order < @$fields['order']) {						$where_cond	= array('category_id'	=> $fields['category_id'],											'order >'		=> $this->page->order,											'order <='		=> $order,											'status !='		=> 'deleted');						$orders		= $this->page->find($where_cond);						foreach ($orders as $row) {							$row->order	= $row->order - 1;							$row->update();						}					} else if ($this->page->order > @$fields['order']) {						$where_cond	= array('category_id'	=> $fields['category_id'],											'order >'		=> $order,											'order <='		=> $this->page->order,											'status !='		=> 'deleted');						$orders		= $this->page->find($where_cond);						foreach ($orders as $row) {							$row->order	= $row->order + 1;							$row->update();						}						$order		= $order + 1;					} else if ($this->page->order == @$fields['order']) {						$order		= $order + 1;					}				}				unset($orders);				$params	= array('category_id'		=> $fields['category_id'],								'name'				=> $fields['name'],								'subject'			=> $fields['subject'],								'synopsis'			=> isset($fields['synopsis']) ? $fields['synopsis'] : '',								'text'				=> $fields['text'],								'attribute'			=> isset($fields['attribute']) ? $fields['attribute'] : '',								'publish_date'		=> isset($fields['publish_date']) ? $this->_reverse_date($fields['publish_date']) : '0000-00-00',								'unpublish_date'	=> isset($fields['unpublish_date']) ? $this->_reverse_date($fields['unpublish_date']) : '0000-00-00',								'allow_comment'		=> isset($fields['allow_comment']) ? $fields['allow_comment'] : 0,								'tags'				=> isset($fields['tags']) ? $fields['tags'] : '',								'order'				=> isset($fields['order']) ? $order : 0,								'status'			=> $fields['status']);				foreach ($params as $var => $val) {					$this->page->$var	= $val;				}				$this->page->update();				if (isset($this->_prefs['show_upload']) && $this->_prefs['show_upload'] && isset($this->_prefs['uploads'])) {					$where_cond			= array('page_id'	=> $this->page->id);					$files				= $this->file->find($where_cond);					$buffers			= array();					foreach ($files as $row) {						$buffers[$row->field_name]	= $row;					}					$files				= $buffers;					unset($buffers);					foreach ($this->_prefs['uploads'] as $row_name => $row_params) {						if (isset($fields['delete_'.$row_name]) && $fields['delete_'.$row_name] == 1 && isset($files[$row_name])) {							$this->file->id	= $files[$row_name]->id;							$this->file->load();							$this->file->delete();						}						// if (!isset($_FILES[$row_name]) || (isset($_FILES[$row_name]) && !upload::required($_FILES[$row_name]) || !upload::valid($_FILES[$row_name])))							// continue;						if (!Upload::not_empty($post[$row_name]) || !Upload::type($post[$row_name],explode(',',$row_params['file_type'])) || !Upload::valid($post[$row_name]))							continue;						$file_hash	= md5(time() + rand(100, 999));						$file_data	= pathinfo($post[$row_name]['name']);						$file_name	= Lib::_upload_to($post[$row_name], $file_hash.'.'.$file_data['extension'], $this->_upload_path, 0755);						$file_data	= pathinfo($file_name);						$file_mime	= $post[$row_name]['type'];						if (!isset($files[$row_name])) {							$params			= array('page_id'	=> $id,													'field_name'	=> $row_name,													'file_name'		=> $file_data['basename'],													'file_type'		=> $file_mime,													'caption'		=> isset($fields[$row_name.'_caption']) ? $fields[$row_name.'_caption'] : '');							$this->file->add($params);						} else {							$this->file->id	= $files[$row_name]->id;							$this->file->load();							$params			= array('page_id'	=> $id,													'field_name'	=> $row_name,													'file_name'		=> $file_data['basename'],													'file_type'		=> $file_mime,													'caption'		=> isset($fields[$row_name.'_caption']) ? $fields[$row_name.'_caption'] : '');							foreach ($params as $var => $val) {								$this->file->$var	= $val;							}							$this->file->update();						}					}				}				if ($category_id != '')					$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$this->page->id.'/'.$category_id);				else					$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$this->page->id);				return;			} else {				$fields		= Arr::overwrite($fields, $post->as_array());				$errors 	= Arr::overwrite($errors, $post->errors('validation'));				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '') {						$buffers[$row_key]	= Lib::config('admin.error_field_open').ucfirst($row_val).Lib::config('admin.error_field_close');					} else {						$buffers[$row_key]	= $row_val;					}				}				$errors		= $buffers;			}		} else {			$fields	= array('category_id'		=> $this->page->category_id,							'name'				=> $this->page->name,							'subject'			=> $this->page->subject,							'synopsis'			=> $this->page->synopsis,							'text'				=> $this->page->text,							'attribute'			=> $this->page->attribute,							'publish_date'		=> ($this->page->publish_date != '0000-00-00') ? $this->_reverse_date($this->page->publish_date) : '',							'unpublish_date'	=> ($this->page->unpublish_date != '0000-00-00') ? $this->_reverse_date($this->page->unpublish_date) : '',							'allow_comment'		=> $this->page->allow_comment,							'tags'				=> $this->page->tags,							'order'				=> $this->page->order,							'status'			=> $this->page->status);			$where_cond			= array('page_id'	=> $this->page->id);			$files				= $this->file->find($where_cond);			$buffers			= array();			foreach ($files as $row) {				$buffers[$row->field_name]	= $row;			}			$files				= $buffers;			unset($buffers);			if (isset($this->_prefs['show_upload']) && $this->_prefs['show_upload'] && isset($this->_prefs['uploads'])) {				foreach ($this->_prefs['uploads'] as $row_name => $row_params) {					$fields[$row_name]	= '';					if (isset($row_params['caption']) && $row_params['caption'])						$fields[$row_name.'_caption']	= (isset($files[$row_name])) ? $files[$row_name]->caption : '';				}			}		}		/** Views **/		$where_cond			= array('status !='		=> 'deleted');		$order_by			= array('category_id'	=> 'ASC',									'order'			=> 'ASC');		$orders				= $this->page->find($where_cond, $order_by);		$content_vars		= array('errors'		=> $errors,									'fields'		=> $fields,									'module_name'	=> $this->_module_name,									'module_menu'	=> $this->_module_menu,									'page'			=> $this->page,									'categories'	=> $this->categories,									'files'			=> $files,									'orders'		=> $orders,									'statuses'		=> $this->statuses,									'readable_mime'	=> Lib::config($this->_module_name.'.readable_mime'),									'category_id'	=> $category_id);		$content_vars		= array_merge($content_vars, $this->_prefs);		$content			= View::factory($this->_module_name.'/backend/'.$this->_module_name.'_edit');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content;	}		public function action_delete () {		$this->page->id	= $this->id1;		if (!$this->page->load()) {			$this->request->redirect('admin-cp/'.$this->_class_name.'/error/invalid_request');			return;		}		$this->page->status	= 'deleted';		if($this->page->update())			echo 1;		else			echo 0;		exit;//		$this->session->set_flash('function_delete', 'success');////		$redirect_url	= ($this->acl->previous_url != '') ? $this->acl->previous_url : 'admin-cp/'.$this->_class_name.'/index';////		$this->request->redirect($redirect_url);	}		public function action_download() {		$files		= $this->id1;		$where_cond	= array('file_name'	=> $files);		$files		= $this->file->find($where_cond);		foreach ($files as $row) {			Lib::_download(Lib::config($this->_module_name.'.upload_url').$row->file_name);		}	}		private function _auto_image_manipulation () {		$files		= $this->file->find();		$buffers	= array('index.html');		foreach ($files as $row) {			/** store to save list **/			if(file_exists(Lib::config($this->_module_name.'.upload_path').$row->file_name)) {			$buffers[]		= $row->file_name;			if (isset($this->_prefs['uploads'][$row->field_name]['image_manipulation']) && substr($row->file_type, 0, strlen('image/')) == 'image/') {				$params			= $this->_prefs['uploads'][$row->field_name]['image_manipulation'];				$image_ratio	= isset($params['ratio']) ? $params['ratio'] : 'auto';				$thumbs			= isset($params['thumbnails']) ? $params['thumbnails'] : array();				$crops			= isset($params['crop']) ? $params['crop'] : array();				switch ($image_ratio) {					case 'none':						$image_ratio	= Image::NONE;						break;					case 'width':						$image_ratio	= Image::WIDTH;						break;					case 'height':						$image_ratio	= Image::HEIGHT;						break;					default:						$image_ratio	= Image::AUTO;				}				$file_name		= Lib::config($this->_module_name.'.upload_path').$row->file_name;				$file_data		= pathinfo($file_name);				$image			= new Image($file_name);				if (isset($params['thumbnails'])) {					foreach ($params['thumbnails'] as $size) {						if (is_file($file_data['dirname'].'/'.$file_data['filename'].'_resize_'.$size.'.'.$file_data['extension'])) {							/** store to save list **/							$buffers[]		= $file_data['filename'].'_resize_'.$size.'.'.$file_data['extension'];							continue;						}						list($width, $height)	= explode('x', $size);						$image->resize($width, $height, $image_ratio);						$image->save($file_data['dirname'].'/'.$file_data['filename'].'_resize_'.$size.'.'.$file_data['extension']);						/** store to save list **/						$buffers[]		= $file_data['filename'].'_resize_'.$size.'.'.$file_data['extension'];					}				}				if (isset($params['crop'], $params['crop'][0])) {					if (!is_array($params['crop'][0])) {						if (is_file($file_data['dirname'].'/'.$file_data['filename'].'_crop_'.$params['crop'][0].'.'.$file_data['extension'])) {							/** store to save list **/							$buffers[]		= $file_data['filename'].'_crop_'.$params['crop'][0].'.'.$file_data['extension'];							continue;						}						list($orig_w, $orig_h)	= getimagesize($file_name);						$crop_aligns			= array('top', 'bottom', 'left', 'right', 'center');						if (isset($params['crop'][0]) && strpos($params['crop'][0], 'x') != 0) {							list($width, $height)	= explode('x', $params['crop'][0]);							if (($orig_w / $width) < ($orig_h / $height))								$image_ratio		= Image::WIDTH;							else								$image_ratio		= Image::HEIGHT;						}						if (isset($params['crop'][1]) && strpos($params['crop'][1], 'x') != 0)							list($crop_x, $crop_y)	= explode('x', $params['crop'][1]);						else if (isset($params['crop'][1]) && $params['crop'][1] == 'center')							list($crop_x, $crop_y)	= array('center', 'center');						else if (isset($params['crop'][1], $params['crop'][2]))							list($crop_x, $crop_y)	= array($params['crop'][1], $params['crop'][2]);						$image->resize($width, $height, $image_ratio);						$image->crop($width, $height, $crop_x, $crop_y);						$image->save($file_data['dirname'].'/'.$file_data['filename'].'_crop_'.$params['crop'][0].'.'.$file_data['extension']);						/** store to save list **/						$buffers[]		= $file_data['filename'].'_crop_'.$params['crop'][0].'.'.$file_data['extension'];					} else {						foreach ($params['crop'][0] as $crop_row) {							if (is_file($file_data['dirname'].'/'.$file_data['filename'].'_crop_'.$crop_row.'.'.$file_data['extension'])) {								/** store to save list **/								$buffers[]		= $file_data['filename'].'_crop_'.$crop_row.'.'.$file_data['extension'];								continue;							}							list($orig_w, $orig_h)	= getimagesize($file_name);							$crop_aligns			= array('top', 'bottom', 'left', 'right', 'center');							if (isset($params['crop'][0]) && strpos($crop_row, 'x') != 0) {								list($width, $height)	= explode('x', $crop_row);								if (($orig_w / $width) < ($orig_h / $height))									$image_ratio		= Image::WIDTH;								else									$image_ratio		= Image::HEIGHT;							}							if (isset($params['crop'][1]) && strpos($params['crop'][1], 'x') != 0)								list($crop_x, $crop_y)	= explode('x', $params['crop'][1]);							else if (isset($params['crop'][1]) && $params['crop'][1] == 'center')								list($crop_x, $crop_y)	= array('center', 'center');							else if (isset($params['crop'][1], $params['crop'][2]))								list($crop_x, $crop_y)	= array($params['crop'][1], $params['crop'][2]);							$image->resize($width, $height, $image_ratio);							$image->crop($width, $height, $crop_x, $crop_y);							$image->save($file_data['dirname'].'/'.$file_data['filename'].'_crop_'.$crop_row.'.'.$file_data['extension']);							/** store to save list **/							$buffers[]		= $file_data['filename'].'_crop_'.$crop_row.'.'.$file_data['extension'];						}					}				}				unset($image);			}		}		}		$dir_name		= Lib::config($this->_module_name.'.upload_path');		if(!is_dir($dir_name)) {			mkdir($dir_name);		}		$folder_files	= scandir($dir_name);		$deleted_files	= array_diff($folder_files, $buffers);		foreach ($deleted_files as $row) {			if(is_file($dir_name.$row) && is_writeable($dir_name.$row))				unlink($dir_name.$row);		}	}		/*** Function Access ***/	// Action for update item status	public function action_change() {		if ($this->request->post() && $this->request->post('check') !='') {			$rows	= $this->request->post('check');			foreach ($rows as $row) {				$this->page->id	= $row;				if (!$this->page->load())					continue;				$this->page->status	= $this->request->post('select_action');				$this->page->update();			}			$redirect_url	= (strstr($this->acl->previous_url,'admin-cp')) ? $this->acl->previous_url : 'admin-cp/'.$this->_class_name.'/index';			$this->request->redirect($redirect_url);		} else {			$this->request->redirect('admin-cp/'.$this->_class_name);		}	}		/** CALLBACKS **/	public function _valid_category_id (Validation $array, $field) {		if ($array[$field] == 0)			return TRUE;		$where_cond		= array('id'	=> $array[$field]);		$parent_exists	= ($this->category->find_count($where_cond) != 0);		if (!$parent_exists)			$array->error($field, 'invalid_category_id');	}		public function _unique_name (Validation $array, $field) {		if (isset($this->page->name) && $this->page->name == $array[$field])			return;		$where_cond		= array('name'	=> $array[$field]);		$name_exists	= ($this->page->find_count($where_cond) != 0);		if ($name_exists)			$array->error($field, 'name_exists');	}		public function _valid_search_key ($value = '') {		return mysql_real_escape_string($value);	}		/** PRE FILTER **/	public function _safe_html_name ($value = '') {		//return htmlentities($value);		return $value;	}		public function _reverse_date ($value = '') {		if (strpos($value, '/') != 0)			return (implode('-', array_reverse(explode('/', $value))));		else			return (implode('/', array_reverse(explode('-', $value))));	}		public function _category_id ($value = '') {		$where_cond	= array('name LIKE'	=> '%'.$value.'%',							'status !='	=> 'deleted');		$buffers	= $this->category->find($where_cond);		$ids		= array();		foreach ($buffers as $row) {			$ids[]	= $row->id;		}		return $ids;	}}