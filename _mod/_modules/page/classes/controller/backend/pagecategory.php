<?php defined('SYSPATH') OR die('No direct access allowed.');class Controller_Backend_PageCategory extends Controller_Backend_BaseAdmin {	protected $_module_name;	protected $_class_name;	protected $_search_keys;	protected $_prefs;	protected $_upload_path;	protected $category;	protected $categories;	protected $statuses;	protected $id1; 	protected $id2; 	protected $id3;	protected $id4;		public function before () {		parent::before();        $this->id1 				= Request::$current->param('id1');        $this->id2 				= Request::$current->param('id2');        $this->id3 				= Request::$current->param('id3');		$this->id4 				= Request::$current->param('id4');				$this->_module_name		= 'page';		$this->_class_name		= strtolower(str_replace('Controller_Backend_', '', get_class($this)));		$this->_module_menu		= $this->acl->module_menu;		$this->_search_keys		= array('title'		=> 'Title',										'name'		=> 'Name',										'status'	=> 'Status');		$this->_prefs			= (Lib::config($this->_module_name.'.page_category_fields') !== NULL) ? Lib::config($this->_module_name.'.page_category_fields') : array();		$this->_upload_path		= (Lib::config($this->_module_name.'.category_upload_path') !== NULL) ? Lib::config($this->_module_name.'.category_upload_path') : array();		$this->_upload_url		= (Lib::config($this->_module_name.'.category_upload_url') !== NULL) ? Lib::config($this->_module_name.'.category_upload_url') : array();		$this->category			= new Model_PageCategory;		$this->file				= new Model_PageCategoryFile;		$where_cond				= array('status !='	=> 'deleted');		$this->categories		= $this->category->find($where_cond);		$this->position			= array(1	=> 'Top',										2	=> 'Bottom',										3	=> 'Top & Bottom');		$this->statuses			= array('publish',										'unpublish');		unset($category);	}		function action_index () {		$where_cond	= array('status !='	=> 'deleted');		/** Find & Multiple change status **/		if ($_POST) {			$post	= Validation::factory($_POST);			if (isset($post['field']) || isset($post['keyword'])) {				$post->rule('keyword', 'regex', array(':value', '/^[a-z_.\-]++$/iD'));				if ($post->check()) {					$where_cond[$post['field'] . ' LIKE']	= $post['keyword'] . '%';					$filters	= array('f'	=> $post['field'],										'q'	=> $post['keyword']);					$this->session->set($this->_class_name.'_filter', serialize($filters));				} else if (isset($post['find'])) {					$this->session->delete($this->_class_name.'_filter');				}			}			if ($this->session->get($this->_class_name.'_filter') !== FALSE) {				$filters	= unserialize($this->session->get($this->_class_name.'_filter'));				if (in_array($filters['f'], array_keys($this->_search_keys)) && $filters['q'] != '')					$where_cond[$filters['f'] . ' LIKE']	= '%' . $filters['q'] . '%';			}		}		/** Table sorting **/		$params		= Request::$current->param();		$sorts		= array('asc', 'desc');		$sort		= isset($params['id2']) ? $this->id2 : 'title';		$order		= isset($params['id4']) ? $this->id4 : $sorts[0];		$order_by	= array($sort 	=> $order);		$page_index	= isset($_GET['page']) ? $_GET['page'] - 1: 0;		//$page_index	= isset($params['page']) ? $params['no'] - 1: 0;		$per_page	= Lib::config('admin.item_per_page');		//$per_page	= 4;		$page_url	= isset($_GET['page']) ? '?page='.$_GET['page'] : '';		$base_url	= 'admin-cp/'.$this->_class_name;		$offset		= ($page_index == 0) ? '' : $page_index * $per_page;		$table_headers	= array('title'		=> 'Title',								/*'order'		=> 'Order',*/								/*'position'	=> 'Position',*/								'status'	=> 'Status',								'added'		=> 'Added',								'modified'	=> 'Modified');		if (!isset($this->_prefs['show_position']) && !$this->_prefs['show_position']) {			unset($table_headers['position']);		}		if (isset($params['sort']) && isset($params['order'])) {			$headers	= array_keys($table_headers);			$sort		= (isset($params['sort']) && in_array(strtolower($params['sort']), $headers)) ? strtolower($params['sort']) : $headers[0];			$order		= (isset($params['order']) && in_array(strtolower($params['order']), $sorts)) ? strtolower($params['order']) : $sorts[0];			$order_by	= array($sort	=> $order);			$base_url	= 'admin-cp/'.$this->_class_name.'/index/sort/' . $params['sort'] . '/order/' . $params['order'] . '/page/';		}		/** Execute list query **/		$field		= isset($filters['f']) ? $filters['f'] : '';		$keyword	= isset($filters['q']) ? $filters['q'] : '';		$where_cond	= isset($where_cond) ? $where_cond : '';		$total_rows		= count($this->category->find($where_cond));		$total_record 	= $total_rows;		$listings	= $this->category->find($where_cond, $order_by, $per_page, $offset);		/** Initialize pagination **/		$pagination = Pagination::factory(array(				'total_items' 		=> $total_rows,				'items_per_page' 	=> $per_page,			 )		);		/** Views **/		$content_vars		= array('listings'		=> $listings,									'table_headers'	=> $table_headers,									'statuses'		=> $this->statuses,									'position'		=> $this->position,									'module_name'	=> $this->_module_name,									'class_name'	=> $this->_class_name,									'module_menu'	=> $this->_module_menu,									'search_keys'	=> $this->_search_keys,									'total_record'	=> $total_record,									'field'			=> $field,									'keyword'		=> $keyword,									'order'			=> $order,									'sort'			=> $sort,									'page_url'		=> $page_url,									'page_index'	=> $offset,									'params'		=> $params,									'pagination'	=> $pagination);		$content_vars		= array_merge($content_vars, $this->_prefs);		$content			= View::factory($this->_module_name.'/backend/'.$this->_class_name.'_index');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content;	}		public function action_add () {		$fields	= array('parent_id'			=> '',						'name'				=> '',						'title'				=> '',						'description'		=> '',						'position'			=> '',						'order'				=> '',						'status'			=> '');		if (isset($this->_prefs['show_category_upload']) && $this->_prefs['show_category_upload'] && isset($this->_prefs['uploads'])) {			foreach ($this->_prefs['uploads'] as $row_name => $row_params) {				$fields[$row_name]	= '';				if (isset($row_params['caption']) && $row_params['caption'])					$fields[$row_name.'_caption']	= '';			}		}		$errors	= $fields;		if ($_POST) {			if ($_FILES) 				$post	= Validation::factory(array_merge($_POST,$_FILES));			else				$post	= Validation::factory($_POST);			$post->rule('title', 'not_empty');            $post->rule('title', 'min_length', array(':value', 4));            $post->rule('name', 'not_empty');			$post->rule('name', 'min_length', array(':value', 4));			$post->rule('description', 'not_empty');            $post->rule('status', 'not_empty');			$post->rule('name', array($this, '_unique_name'), array(':validation', 'name'));			if (isset($this->_prefs['show_category_upload']) && $this->_prefs['show_category_upload'] && isset($this->_prefs['category_uploads'])) {				foreach ($this->_prefs['uploads'] as $row_name => $row_params) {					if (isset($row_params['optional']) && !$row_params['optional']) {						//$post->rules($row_name, 'Upload::required');						$post->rule($row_name, 'Upload::valid');					}					if (Upload::type($post[$row_name],explode(',',$row_params['file_type'])) !== 1)						continue;					//if (isset($row_params['file_type']))						//$post->rule(substr($post[$row_name]['type'], strpos($post[$row_name]['type'], '/') + 1), 'Upload::type['.$row_params['file_type'].']');					//if (isset($row_params['max_file_size']))						//$post->rule(round($post[$row_name]['size'] / 1024, 2).'KB', 'Upload::size['.$row_params['max_file_size'].']');				}			}			if ($post->check()) {				$fields	= $post->as_array();				if ($fields['parent_id'] != 0) {					$parent		= $this->category->load($fields['parent_id']);					$sub_level	= $parent->sub_level + 1;					unset($parent);				} else {					$sub_level	= 0;				}				if(isset($fields['order'])) {					$where_cond	= array('parent_id'	=> $fields['parent_id']);					$last_order	= $this->category->find_count($where_cond) + 1;					if ($fields['order'] < $last_order) {						$where_cond	= array('parent_id'	=> $fields['parent_id'],											'order >='	=> $fields['order'],											'status !='	=> 'deleted');						$categories	= $this->category->find($where_cond);						foreach ($categories as $row) {							$row->order	= $row->order + 1;							$row->update();						}						unset($categories);					}				}				$params	= array('parent_id'		=> $fields['parent_id'],								'name'			=> trim($fields['name']),								'title'			=> trim($fields['title']),								'description'	=> $fields['description'],								'position'		=> (isset($this->_pref['show_position']) && $this->_prefs['show_position']) ? $fields['position'] : '1',								'sub_level'		=> $sub_level,								'order'			=> (isset($fields['order'])) ? $fields['order'] : 0,								'user_id'		=> (isset($this->acl->logged_user->id)) ? $this->acl->logged_user->id : 0,								'status'		=> $fields['status']);				$id		= $this->category->add($params);				if (isset($this->_prefs['show_category_upload']) && $this->_prefs['show_category_upload'] && isset($this->_prefs['uploads'])) {					$file_names	= '';					foreach ($this->_prefs['uploads'] as $row_name => $row_params) {						// if (!Upload::not_empty($post[$row_name]) || !Upload::type($post[$row_name],explode(',',$row_params['file_type'])) || !Upload::valid($post[$row_name]))							// continue;						// if (Upload::type($post[$row_name],explode(',',$row_params['file_type'])) !== 1)							// continue;						if (!File::exts_by_mime($post[$row_name]['type']))							continue;						$file_hash	= md5(time() + rand(100, 999));						$file_data	= pathinfo($post[$row_name]['name']);						$file_name	= Lib::_upload_to($post[$row_name], $file_hash.'.'.$file_data['extension'], $this->_upload_path, 0755);						$file_data	= pathinfo($file_name);						$file_mime	= $post[$row_name]['type'];						if ($file_name != '' && isset($this->_prefs['uploads'][$row_name]['image_manipulation'])) {							$params			= array('category_id'	=> $id,													'field_name'	=> $row_name,													'file_name'		=> $file_data['basename'],													'file_type'		=> $file_mime,													'caption'		=> isset($fields[$row_name.'_caption']) ? $fields[$row_name.'_caption'] : '');							$this->file->add($params);						}					}				}				if (isset($fields['add_another'])) {					$this->request->redirect('admin-cp/'.$this->_class_name.'/add');					return;				}				$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$id);				return;			} else {				$fields		= Arr::overwrite($fields, $post->as_array());				$errors 	= Arr::overwrite($errors, $post->errors('validation'));				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '') {						$buffers[$row_key]	= Lib::config('admin.error_field_open').ucfirst($row_val).Lib::config('admin.error_field_close');					} else {						$buffers[$row_key]	= $row_val;					}				}				$errors		= $buffers;			}		}		/** Generate Thumbnails **/		//Lib::_auto_image_manipulation($this->_upload_path, $this->file, $this->_prefs);		/** Views **/		$where_cond			= array('status !='		=> 'deleted');		$order_by			= array('order'			=> 'ASC');		$orders				= $this->category->find($where_cond, $order_by);		$content_vars		= array('errors'		=> $errors,									'fields'		=> $fields,									'orders'		=> $orders,									'categories'	=> $this->categories,									'position'		=> $this->position,									'statuses'		=> $this->statuses,									'module_name' 	=> $this->_module_name,									'class_name'	=> $this->_class_name,									'module_menu'	=> $this->_module_menu);		$content_vars		= array_merge($content_vars, $this->_prefs);		$content			= View::factory($this->_module_name.'/backend/'.$this->_class_name.'_add');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content;  	}		public function action_view () {		$this->category->id	= $this->id1;		if (!$this->category->load()) {			$this->request->redirect('admin-cp/'.$this->_class_name.'/error/invalid_request');			return;		}		/** Views **/		if ($this->category->parent_id != 0) {			$parent			= $this->category->load($this->category->parent_id);			$parent			= htmlspecialchars($parent->title, ENT_QUOTES);		} else {			$parent			= 'This category is parent';		}//		$order				= '';		if ($this->category->order != 1) {			$where_cond		= array('parent_id'	=> $this->category->parent_id,									'order'		=> ($this->category->order - 1));			$categories		= $this->category->find($where_cond, '', 1);			$order			= 'After '.strtolower(str_replace('_', ' ', $this->_class_name)).' '.htmlspecialchars(@$categories[0]->title, ENT_QUOTES);		} else {			$order			= 'At the beginning';		}		$where_cond			= array('category_id'	=> $this->id1);		$files				= $this->file->find($where_cond);		$buffers			= array();		foreach ($files as $row) {			$buffers[$row->field_name]	= $row;		}		$files				= $buffers;		unset($buffers);		/** Generate Thumbnails **/		Lib::_auto_image_manipulation($this->_upload_path, $this->file, $this->_prefs);		/** Views **/		$content_vars		= array(									'files'	  	=> $files,									'upload_path' => $this->_upload_path,									'upload_url'  => $this->_upload_url,									'module_menu' => $this->_module_menu,									'category'	=> $this->category,									'position'	=> $this->position,									'parent'	=> $parent,									'order'		=> $order,									'module_name'=>$this->_module_name,									'readable_mime'	=> Lib::config($this->_module_name.'.readable_mime'),									'_class_name'=>$this->_class_name									);		$content_vars		= array_merge($content_vars, $this->_prefs);		$content			= View::factory($this->_module_name.'/backend/'.$this->_class_name.'_view');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content;     }		public function action_edit () {		$id = $this->id1;		$this->category->id	= $id;		if (!$this->category->load()) {			$this->request->redirect('admin-cp/'.$this->_class_name.'/error/invalid_request');			return;		}		$fields	= array('parent_id'			=> '',						'name'				=> '',						'title'				=> '',						'description'		=> '',						'position'			=> '',						'order'				=> '',						'status'			=> '');		if (isset($this->_prefs['show_category_upload']) && $this->_prefs['show_category_upload'] && isset($this->_prefs['uploads'])) {			foreach ($this->_prefs['uploads'] as $row_name => $row_params) {				$fields[$row_name]	= '';			}		}		$errors	= $fields;		if ($_POST) {			if ($_FILES)				$post	= new Validation(array_merge($_POST, $_FILES));			else				$post	= new Validation($_POST);			$post->rule('title', 'not_empty');            $post->rule('title', 'min_length', array(':value', 4));            $post->rule('name', 'not_empty');			$post->rule('name', 'min_length', array(':value', 4));			$post->rule('description', 'not_empty');            $post->rule('status', 'not_empty');			//$post->rule('name', array($this, '_unique_name'), array(':validation', 'name'));			if (isset($this->_prefs['show_category_upload']) && $this->_prefs['show_category_upload'] && isset($this->_prefs['uploads'])) {				foreach ($this->_prefs['uploads'] as $row_name => $row_params) {					// if (isset($row_params['file_type']))						// $post->add_rules($row_name, 'upload::type['.$row_params['file_type'].']');					// if (isset($row_params['max_file_size']))						// $post->add_rules($row_name, 'upload::size['.$row_params['max_file_size'].']');					if (Upload::type($post[$row_name],explode(',',$row_params['file_type'])) !== 1)						continue;					}			}			if ($post->check()) {				$fields	= $post->as_array();				if ($fields['parent_id'] != 0) {					$parent		= $this->category->load($fields['parent_id']);					$sub_level	= $parent->sub_level + 1;					unset($parent);				} else {					$sub_level	= 0;				}				$order			= 0;				if(isset($fields['order'])) {					$order		= ($fields['order'] == 1) ? $fields['order'] : ($fields['order'] - 1);					$where_cond	= array('parent_id'	=> $fields['parent_id']);					$last_order	= $this->category->find_count($where_cond) + 1;					if ($this->category->sub_level != $sub_level) {						$where_cond	= array('parent_id'	=> $this->category->parent_id,											'sub_level'	=> $this->category->sub_level,											'order >'	=> $this->category->order,											'status !='	=> 'deleted');						$orders		= $this->category->find($where_cond);						foreach ($orders as $row) {							$row->order	= $row->order - 1;							$row->update();						}						$where_cond	= array('parent_id'	=> $fields['parent_id'],											'sub_level'	=> $sub_level,											'order >'	=> $fields['order'],											'status !='	=> 'deleted');						$orders		= $this->category->find($where_cond);						foreach ($orders as $row) {							$row->order	= $row->order + 1;							$row->update();						}					} else {						if ($fields['order'] == 1) {							$where_cond	= array('parent_id'	=> $fields['parent_id'],												'sub_level'	=> $sub_level,												'order >='	=> $order,												'order <='	=> $this->category->order,												'status !='	=> 'deleted');							$orders		= $this->category->find($where_cond);							foreach ($orders as $row) {								$row->order	= $row->order + 1;								$row->update();							}						} else if ($this->category->order < $fields['order']) {							$where_cond	= array('parent_id'	=> $fields['parent_id'],												'sub_level'	=> $sub_level,												'order >'	=> $this->category->order,												'order <='	=> $order,												'status !='	=> 'deleted');							$orders		= $this->category->find($where_cond);							foreach ($orders as $row) {								$row->order	= $row->order - 1;								$row->update();							}						} else if ($this->category->order > $fields['order']) {							$where_cond	= array('parent_id'	=> $fields['parent_id'],												'sub_level'	=> $sub_level,												'order >'	=> $order,												'order <='	=> $this->category->order,												'status !='	=> 'deleted');							$orders		= $this->category->find($where_cond);							foreach ($orders as $row) {								$row->order	= $row->order + 1;								$row->update();							}							$order		= $order + 1;						} else if ($this->category->order == $fields['order']) {							$order		= $order + 1;						}					}					unset($orders);				}				$file_names	= '';				if (isset($this->_prefs['show_category_upload']) && $this->_prefs['show_category_upload'] && isset($this->_prefs['uploads'])) {					$where_cond			= array('category_id'	=> $this->category->id);					$files				= $this->file->find($where_cond);					$buffers			= array();					foreach ($files as $row) {						$buffers[$row->field_name]	= $row;					}					$files				= $buffers;					foreach ($this->_prefs['uploads'] as $row_name => $row_params) {						if (isset($fields['delete_'.$row_name]) && $fields['delete_'.$row_name] == 1 && isset($files[$row_name])) {							$this->file->id	= $files[$row_name]->id;							$this->file->load();							$this->file->delete();						}						//if (!isset($_FILES[$row_name]) || (isset($_FILES[$row_name]) && !upload::required($_FILES[$row_name]) || !upload::valid($_FILES[$row_name])))							//continue;						if (!File::exts_by_mime($post[$row_name]['type']))							continue;						$file_hash	= md5(time() + rand(100, 999));						$file_data	= pathinfo($post[$row_name]['name']);						$file_name	= Lib::_upload_to($post[$row_name], $file_hash.'.'.$file_data['extension'], $this->_upload_path, 0755);						$file_data	= pathinfo($file_name);						$file_mime	= $post[$row_name]['type'];						if (!isset($files[$row_name])) {							$params			= array('category_id'	=> $id,													'field_name'	=> $row_name,													'file_name'		=> $file_data['basename'],													'file_type'		=> $file_mime,													'caption'		=> isset($fields[$row_name.'_caption']) ? $fields[$row_name.'_caption'] : '');							$this->file->add($params);						} else {							$this->file->id	= $files[$row_name]->id;							$this->file->load();							$params			= array('category_id'		=> $id,													'field_name'	=> $row_name,													'file_name'		=> $file_data['basename'],													'file_type'		=> $file_mime,													'caption'		=> isset($fields[$row_name.'_caption']) ? $fields[$row_name.'_caption'] : '');							foreach ($params as $var => $val) {								$this->file->$var	= $val;							}							$this->file->update();						}					}				}				$params	= array('parent_id'		=> $fields['parent_id'],								'name'			=> trim($fields['name']),								'title'			=> trim($fields['title']),								'description'	=> $fields['description'],								'position'		=> (isset($this->_prefs['show_position']) && $this->_prefs['show_position']) ? $fields['position'] : '',								'sub_level'		=> $sub_level,								'order'			=> isset($fields['order']) ? $order : 0,								'status'		=> $fields['status']);				foreach ($params as $var => $val) {					$this->category->$var	= $val;				}				$this->category->update();				$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$id);				return;			} else {				$fields		= Arr::overwrite($fields, $post->as_array());				$errors 	= Arr::overwrite($errors, $post->errors('validation'));				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '')						$buffers[$row_key]	= Lib::config('admin.error_field_open').ucfirst($row_val).Lib::config('admin.error_field_close');					else						$buffers[$row_key]	= $row_val;				}				$errors		= $buffers;			}		} else {			$fields	= array('parent_id'			=> $this->category->parent_id,							'name'				=> $this->category->name,							'title'				=> $this->category->title,							'description'		=> $this->category->description,							'position'			=> $this->category->position,							'order'				=> $this->category->order,							'status'			=> $this->category->status);			$where_cond			= array('category_id'	=> $this->category->id);			$files				= $this->file->find($where_cond);			$buffers			= array();			foreach ($files as $row) {				$buffers[$row->field_name]	= $row;			}			$files				= $buffers;			unset($buffers);			if (isset($this->_prefs['show_category_upload']) && $this->_prefs['show_category_upload'] && isset($this->_prefs['uploads'])) {				foreach ($this->_prefs['uploads'] as $row_name => $row_params) {					$fields[$row_name]	= '';					if (isset($row_params['caption']) && $row_params['caption'])						$fields[$row_name.'_caption']	= (isset($files[$row_name])) ? $files[$row_name]->caption : '';				}			}		}		/** Generate Thumbnails **/		Lib::_auto_image_manipulation($this->_upload_path, $this->file, $this->_prefs);		/** Views **/		$where_cond			= array('parent_id'		=> $this->category->parent_id);		$orders				= $this->category->find($where_cond);		$content_vars		= array('errors'		=> $errors,									'fields'		=> $fields,									'category'		=> $this->category,									'categories'	=> $this->categories,									'files'			=> $files,									'upload_path' 	=> $this->_upload_path,									'upload_url'  	=> $this->_upload_url,									'orders'		=> $orders,									'position'		=> $this->position,									'statuses'		=> $this->statuses,									'module_name' 	=> $this->_module_name,									'class_name'	=> $this->_class_name,									'module_menu'	=> $this->_module_menu,									'readable_mime'	=> Lib::config($this->_module_name.'.readable_mime'),									);		$content_vars		= array_merge($content_vars, $this->_prefs);		$content			= View::factory($this->_module_name.'/backend/'.$this->_class_name.'_edit');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content;	}		public function action_delete ($id = '') {		$this->category->id	= $id;		if (!$this->category->load()) {			$this->request->redirect('admin-cp/error/invalid_request');			return;		}		$this->category->status	= 'deleted';		if($this->category->update())			echo 1;		else			echo 0;		exit;//		$redirect_url	= ($this->acl->previous_url != '') ? $this->acl->previous_url : 'admin-cp/'.$this->_class_name.'/index';////		$this->request->redirect($redirect_url);	}		/*** Function Access ***/	// Action for update item status	public function action_change() {		if ($this->request->post('check') !='') {			$rows	= $this->request->post('check');			foreach ($rows as $row) {				$this->category->id	= $row;				if (!$this->category->load())					continue;				$this->category->status	= $this->request->post('select_action');				$this->category->update();				// Change child status				$children = $this->category->find(array('parent_id'=>$this->category->id));				if (!empty($children)) {					foreach ($children as $child) {						$child->status = $this->request->post('select_action');						$child->update();					}				}			}			$redirect_url	= (strstr($this->acl->previous_url,'admin-cp')) ? $this->acl->previous_url : 'admin-cp/'.$this->_class_name.'/index';			$this->request->redirect($redirect_url);		} else {			$this->request->redirect('admin-cp/'.$this->_class_name);		}	}		public function action_aorder() {		echo $id2;		$files		= $this->id1;		$where_cond	= array('file_name'	=> $files);		$files		= $this->category->find($where_cond);		foreach ($files as $row) {			Lib::_download(Lib::config($this->_module_name.'.upload_url').$row->file_name);		}	}		public function action_download() {		$files		= $this->id1;		$where_cond	= array('file_name'	=> $files);		$files		= $this->file->find($where_cond);		foreach ($files as $row) {			Lib::_download_file_force('',$this->_upload_url.$row->file_name);		}	}		/** CALLBACKS **/	public function _file_type (Validation $array, $field) {		if (!isset($array[$field]))			return;		$valid = Upload::type($array[$field], explode(',',array('gif','jpg','png')));		if ($valid)			return $array->error($field, 'file_type');	}		public function _unique_name (Validation $array, $field) {		if (!isset($array[$field]))			return;		$name = Model_PageCategory::instance()->find_count(array('name' => $array[$field]));		if ($name)			return $array->error($field, 'unique_name');	}		public function _valid_parent_id (Validation $array, $field) {		if ($array[$field] == 0)			return TRUE;		$where_cond		= array('id'	=> $array[$field]);		$parent_exists	= ($this->category->find_count($where_cond) != 0);		if (!$parent_exists)			$array->error($field, 'invalid_parent_id');	}		public function _valid_status (Validation $array, $field) {		if (!in_array($array[$field], $this->statuses))			$array->error($field, 'invalid_status');	}		public function _valid_search_key (Validation $array, $field) {		if (!isset($this->_search_keys)) {			$array->error($field, 'invalid_search_key');			return;		}		$keys			= array_keys($this->_search_keys);		if (!in_array($array[$field], $keys))			$array->error($field, 'invalid_search_key');	}}