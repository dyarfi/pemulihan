<?php defined('SYSPATH') OR die('No direct access allowed.');class Controller_Backend_UserHistory extends Controller_Backend_BaseAdmin {	protected $_module_name;	protected $_class_name;	protected $_search_keys;	protected $_prefs;    protected $session;		public function before () {		parent::before();		$this->now = time();        $this->id1 = Request::$current->param('id1');        $this->id2 = Request::$current->param('id2');        $this->id3 = Request::$current->param('id3');		$this->id4 = Request::$current->param('id4');		$this->_module_name	= Request::$current->controller();		$this->_class_name	= strtolower(str_replace('Controller_Backend_', '', get_class($this)));		$this->_module_menu	= $this->acl->module_menu;		$this->history		= new Model_UserHistory;		$this->user 		= new Model_User;		$this->level 		= new Model_UserLevel;		$this->_prefs		= (Lib::config($this->_module_name.'.'.$this->_class_name.'_fields') !== NULL) ? Lib::config($this->_module_name.'.'.$this->_class_name.'_fields') : array();		$this->_search_keys	= array('module'	 => 'Module',									'controller' => 'Controller',									'action' 	 => 'Action',									'status'	 => 'Status');		$where_cond			= array('id >='	=> $this->session->get('level_id'),										'status' => 'enable');		$this->levels		= $this->level->find($where_cond);		$buffers			= array();		foreach ($this->levels as $levels) {			$buffers[$levels->id] = ucfirst($levels->name);		}		$this->levels			= $buffers;		$this->statuses			= array('active',										'inactive',										'blocked');		$this->level_statuses	= array('enable',										'disable');        unset($buffers);        	}	    public function action_index () {		$where_cond	= array('time !='	=> 0);		if ($this->session->get('level_id') != 1) {			$where_cond = array_merge(array('user_id !=' => 1), $where_cond);		}		/** Find & Multiple change status **/		if ($_POST) {			$post	= new Validation($_POST);			if (isset($post['field']) || isset($post['keyword'])) {				$post->rule('field', array($this, '_valid_search_key'), array(':validation', 'field'));				if ($post->check()) {					$where_cond[$_POST['field'] . ' LIKE']	= $post['keyword'] . '%';					$filters	= array('f'	=> $post['field'],										'q'	=> $post['keyword']);					$this->session->set($this->_class_name.'_filter', serialize($filters));				} else if (isset($post['find'])) {					$this->session->delete($this->_class_name.'_filter');				}			}			if ($this->session->get($this->_class_name.'_filter') !== FALSE) {				$filters	= unserialize($this->session->get($this->_class_name.'_filter'));				if (in_array($filters['f'], array_keys($this->_search_keys)) && $filters['q'] != '')					$where_cond[$filters['f'] . ' LIKE']	= '%' . $filters['q'] . '%';			}		}		/** Table sorting **/		$params		= Request::$current->param();		$sorts		= array('asc', 'desc');		$sort		= isset($params['id2']) ? $this->id2 : 'time';		$order		= isset($params['id4']) ? $this->id4 : $sorts[1];		$order_by	= array($sort 	=> $order);		$page_index	= isset($_GET['page']) ? $_GET['page'] - 1: 0;		//$page_index	= isset($params['page']) ? $params['no'] - 1: 0;		$per_page	= Lib::config('admin.item_per_page');		//$per_page	= 4;		$page_url	= isset($_GET['page']) ? '?page='.$_GET['page'] : '';		$base_url	= 'admin-cp/'.$this->_class_name;		$offset		= ($page_index == 0) ? '' : $page_index * $per_page;		$table_headers	= array('user_id'	 => 'User',								'module'	 => 'Module',								'controller' => 'Controller',								'type'		 => 'Action',								'time'		 => 'Time');		if (isset($params['sort']) && isset($params['order'])) {			$headers	= array_keys($table_headers);			$sort		= (isset($params['sort']) && in_array(strtolower($params['sort']), $headers)) ? strtolower($params['sort']) : $headers[0];			$order		= (isset($params['order']) && in_array(strtolower($params['order']), $sorts)) ? strtolower($params['order']) : $sorts[0];			$order_by	= array($sort	=> $order);			$base_url	= 'admin-cp/'.$this->_class_name.'/index/sort/' . $params['sort'] . '/order/' . $params['order'] . $page_url;		}		/** Execute list query **/		$field		= isset($filters['f']) ? $filters['f'] : '';		$keyword	= isset($filters['q']) ? $filters['q'] : '';		$where_cond	= isset($where_cond) ? $where_cond : '';		$total_rows		= $this->history->find_count($where_cond);		$total_record 	= $total_rows;		$listings	= $this->history->find($where_cond, $order_by, $per_page, $offset);		/** Store index url **/		if (count($listings) == 0 && $total_rows != 0) {			$page_index	= ceil($total_rows / $per_page);			$this->request->redirect($base_url.$page_index);			return;		}		$this->session->get($this->_module_name.'_index', $base_url.$page_index);		/** Initialize pagination **/		$pagination = Pagination::factory(array(				'total_items' 		=> $total_rows,				'items_per_page' 	=> $per_page,			 )		);		//print_r($listings);		// $where_cond	= array('status !='		=> 'deleted',							// 'level_id >='	=> $this->session->get('level_id'));		$user_level = $this->level->find();		$buffers = array();		foreach ($user_level as $level) {			$buffers[$level->id] = $level;		}		$user_level = $buffers;		$users 	= $this->user->find();		$buffers = array();		foreach ($users as $user) {			$buffers[$user->id] = $user;		}		$users = $buffers;		unset($buffers);		/** Views **/		$content_vars		= array('listings'		=> $listings,									'table_headers'	=> $table_headers,									'statuses'		=> $this->statuses,									'user_level'	=> $this->levels,									'search_keys'	=> $this->_search_keys,									'module_name'	=> $this->_module_name,									'module_menu'		=> $this->_module_menu,									'field'			=> $field,									'keyword'		=> $keyword,									'order'			=> $order,									'sort'			=> $sort,									'page_url'		=> $page_url,									'page_index'	=> $offset,									//'params'		=> $params,									'users'			=> $users,									'user_level'	=> $user_level,									'total_record'  => $total_rows,									'pagination'	=> $pagination);		$content			= View::factory('user/backend/'.$this->_module_name.'_index');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content; 	}		public function action_add () {		$fields	= array('name'				=> '',						'email'				=> '',						'password'			=> '',						'confirm_password'	=> '',						'level_id'			=> '');		$errors	= $fields;		if ($_POST) {			$post = Validation::factory($_POST)								->rule('name', 'not_empty')					->rule('name', 'min_length', array(':value', 4))					->rule('email', 'not_empty')					->rule('email', 'Valid::email', array(':value'))					->rule('email', array($this, '_valid_email'), array(':validation', 'email'))					->rule('password', 'not_empty')					->rule('confirm_password', 'not_empty')					->rule('confirm_password', 'matches', array(':validation','confirm_password','password'))					->rule('level_id', array($this, '_valid_level_id'), array(':validation', ':field', 'level_id'));			if ($post->check()) {				$fields	= $post->as_array();				$params	= array('name'		=> $fields['name'],								'email'		=> $fields['email'],								'password'	=> sha1($fields['password']),								'level_id'	=> $fields['level_id'],								'status'	=> 'active');				$id		= $this->history->add($params);				if (isset($fields['add_another'])) {					$this->request->redirect('admin-cp/'.$this->_class_name.'/add');					return;				}				$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$id);				return;			} else {								$fields		= Arr::overwrite($fields, $post->as_array());				$errors 	= Arr::overwrite($errors, $post->errors('validation'));				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '') {						$buffers[$row_key]	= Lib::config('admin.error_field_open').ucfirst($row_val).Lib::config('admin.error_field_close');					} else {						$buffers[$row_key]	= $row_val;					}				}				$errors		= $buffers;			}		}		/** Views **/		$content_vars		= array(								'errors'	=> $errors,								'fields'	=> $fields,								'levels'	=> $this->levels,								'statuses'	=> $this->statuses,								'module_name' 	=> $this->_module_name);		$content			= View::factory('user/backend/'.$this->_module_name.'_add');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content;  	}		public function action_view () {		// Get User Id from url param		$id = $this->request->param('id1');		// Set User Id if TRUE		$this->history->id	= $id;		// Load User Data if TRUE		if (!$this->history->load()) {			// Redirect to profile if TRUE			Request::current()->redirect('admin-cp/'.$this->_module_name.'/index');			return;		}				// User Level Condition		$where_cond = array('status'=>'enable');		/** Views **/		$content_vars		= array('user'			=> $this->history,									'status'		=> $this->statuses,									'user_level'	=> $this->level->find($where_cond));		$content			= View::factory('user/backend/'.$this->_module_name.'_view');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content; 	}		public function action_edit () {		// Get User Id from url param		$id = $this->request->param('id1');		// Set User Id if TRUE		$this->history->id	= $id;		if (!$this->history->load()) {			Request::current()->redirect('admin-cp/error/invalid_request');			return;		}		$fields	= array('name'				=> '',						'email'				=> '',						'password'			=> '',						'confirm_password'	=> '',						'level_id'			=> '',						'status'			=> '');		$errors	= $fields;		if ($_POST) {			$post	= new Validation($_POST);					$post->rule('name', 'not_empty');					$post->rule('name', 'min_length', array(':value', 4));					$post->rule('email', 'not_empty');					$post->rule('email', 'Valid::email', array(':value'));					$post->rule('email', array($this, '_valid_email'), array(':validation', 'email'));					$post->rule('confirm_password', 'matches', array(':validation','confirm_password','password'));					$post->rule('level_id', array($this, '_valid_level_id'), array(':validation', ':field', 'level_id'));			if ($post->check()) {				$fields	= $post->as_array();				$this->history->name		= $fields['name'];				$this->history->email		= $fields['email'];				$this->history->level_id	= $fields['level_id'];				$this->history->status		= $fields['status'];				$this->history->update();				if (isset($fields['password']) && $fields['password'] != '')					$this->history->reset_password($fields['password']);				$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$this->history->id);				return;			} else {				$fields		= Arr::overwrite($fields, $post->as_array());				$errors 	= Arr::overwrite($errors, $post->errors('validation'));				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '') {						$buffers[$row_key]	= Lib::config('admin.error_field_open').ucfirst($row_val).Lib::config('admin.error_field_close');					} else {						$buffers[$row_key]	= $row_val;					}				}				$errors		= $buffers;			}		} else {			$fields	= array('name'				=> $this->history->name,							'email'				=> $this->history->email,							'password'			=> '',							'confirm_password'	=> '',							'level_id'			=> $this->history->level_id,							'status'			=> $this->history->status);		}				/** Views **/		$content_vars		= array('errors'	=> $errors,									'fields'	=> $fields,									'levels'	=> $this->levels,									'statuses'	=> $this->statuses,									'user'		=> $this->history);		$content			= View::factory('user/backend/'.$this->_module_name.'_edit');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content; 	}		public function action_delete () {		// Set is_deleted to TRUE		$this->history->id	= $this->id1;		if (!$this->history->load()) {			$this->request->redirect('admin-cp/'.$this->_class_name.'/index');			return;		}		$this->history->status	= 'inactive';		if($this->history->update()){		  echo 1;		}else{		  echo 0;		}		// $redirect_url	= ($this->acl->previous_url != '') ? $this->acl->previous_url : 'admin-cp/'.$this->_class_name.'/index';		// $redirect_url = $this->request->redirect('admin-cp/'.$this->_class_name.'/index');		// $this->request->redirect($redirect_url);		exit();	}		/*** Function Access ***/	// Action for update item status	public function action_change() {			if ($this->request->post('check') !='') {			$rows	= $this->request->post('check');			foreach ($rows as $row) {				$this->level->id	= $row;				if (!$this->level->load())					continue;				$this->level->status	= $this->request->post('select_action');				$this->level->update();			}			$redirect_url	= (strstr($this->acl->previous_url,'admin-cp')) ? $this->acl->previous_url : 'admin-cp/'.$this->_class_name.'/index';			$this->request->redirect($redirect_url);		} else {				$this->request->redirect('admin-cp/'.$this->_class_name);					}	}		/** CALLBACKS **/	public function _valid_email (Validation $array, $field) {		if (!Valid::email($array[$field]))						return $array->error($field, 'email_exists');	}		public function _unique_username (Validation $array, $field) {		if (!isset($array[$field]))			return;		$member = !Model_UserHistory::unique_username($array[$field]);		if ($member)			return $array->error($field, 'unique_name');	}		/*	public function _unique_email ($value) {		//if (!isset($array[$field]))			//return;		$where_cond		= array('email'		=> $value,								'status !='	=> 'deleted');		$email_exists	= ($this->history->find($where_cond) != 0);		return $email_exists;		//print_r($email_exists); exit();		if ($email)			return $array->error($field, 'unique_email');	}	*/		public function _unique_email (Validation $array, $field) {		if (!Valid::email($array[$field]))			return $array->error($field, 'email_exists');	}		public function _valid_level_id (Validation $array, $field) {		$level_check	= $this->history->find(array('level_id'=>$field));		$level_exists	= count($level_check);		if (!$level_exists)			return true;//$array->error($field, 'invalid_level_id');	}		public function _valid_search_key (Validation $array, $field) {		if (!isset($this->_search_keys)) {			$array->add_error($field, 'invalid_search_key');			return;		}		$keys			= array_keys($this->_search_keys);		if (!in_array($array[$field], $keys))			$array->add_error($field, 'invalid_search_key');	}}