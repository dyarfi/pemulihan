<?php defined('SYSPATH') OR die('No direct access allowed.');class Controller_Backend_User extends Controller_Backend_BaseAdmin {	protected $_module_name;	protected $_class_name;	protected $_search_keys;	protected $_prefs;    protected $user;	protected $profile;	protected $level;	protected $levels;	protected $session;		public function before () {		parent::before();		$this->session = Session::instance();		$this->now      = time();        $this->id1 = Request::$current->param('id1');        $this->id2 = Request::$current->param('id2');        $this->id3 = Request::$current->param('id3');		$this->id4 = Request::$current->param('id4');		$this->_module_name		= Request::$current->controller();		$this->_class_name		= strtolower(str_replace('Controller_Backend_', '', get_class($this)));		$this->_module_menu		= $this->acl->module_menu;		$this->user		= new Model_User;		$this->profile	= new Model_UserProfile;		$this->level	= new Model_UserLevel;		$this->_prefs			= (Lib::config($this->_module_name.'.'.$this->_class_name.'_fields') !== NULL) ? Lib::config($this->_module_name.'.'.$this->_class_name.'_fields') : array();		$this->_genders			= (Lib::config($this->_module_name.'.genders') !== NULL) ? Lib::config($this->_module_name.'.genders') : array();		$this->_search_keys		= array('name'		=> 'Name',										'email'		=> 'E-mail',										'status'	=> 'Status');		$where_cond				= array('id >='		=> $this->session->get('level_id'),										'status'	=> 'enable');		$levels					= $this->level->find($where_cond);		$buffers				= array();		foreach ($levels as $level) {			$buffers[$level->id] = ucfirst($level->name);		}		$this->levels			= $buffers;		$this->statuses			= array('active',										'inactive',										'blocked');		$this->level_statuses	= array('enable',										'disable');        unset($buffers);      	}	    public function action_index () {		$where_cond	= array(/*'status !='		=> 'deleted',*/							'level_id !='		=> '99',							'level_id >='	=> Session::instance()->get('level_id'));		//print_r($this->id1); exit();		//print_r($_POST['check']); exit();		//print_r($_POST['select_action']); exit();		/** Find & Multiple change status **/		if ($_POST) {			$post	= new Validation($_POST);			if (isset($post['field']) || isset($post['keyword'])) {				$post->rule('field', array($this, '_valid_search_key'), array(':validation', 'field'));				if ($post->check()) {					$where_cond[$post['field'] . ' LIKE']	= $post['keyword'] . '%';					$filters	= array('f'	=> $post['field'],										'q'	=> $post['keyword']);					$this->session->set($this->_class_name.'_filter', serialize($filters));				} else if (isset($post['find'])) {					$this->session->delete($this->_class_name.'_filter');				}			}			if ($this->session->get($this->_class_name.'_filter') !== FALSE) {				$filters	= unserialize($this->session->get($this->_class_name.'_filter'));				if (in_array($filters['f'], array_keys($this->_search_keys)) && $filters['q'] != '')					$where_cond[$filters['f'] . ' LIKE']	= '%' . $filters['q'] . '%';			}		}		/** Table sorting **/		$params		= Request::$current->param();		$sorts		= array('asc', 'desc');		$sort		= isset($params['id2']) ? $this->id2 : 'name';		$order		= isset($params['id4']) ? $this->id4 : $sorts[0];		$order_by	= array($sort 	=> $order);		$page_index	= isset($_GET['page']) ? $_GET['page'] - 1: 0;		//$page_index	= isset($params['page']) ? $params['no'] - 1: 0;		$per_page	= Lib::config('admin.item_per_page');		//$per_page	= 4;		$page_url	= isset($_GET['page']) ? '?page='.$_GET['page'] : '';		$base_url	= 'admin-cp/'.$this->_class_name;		$offset		= ($page_index == 0) ? '' : $page_index * $per_page;		$table_headers	= array('name'		=> 'Name',								'email'		=> 'E-mail',								'level_id'		=> 'Level',								'status'	=> 'Status',								'last_login'	=> 'Last Login',								'added'		=> 'Added');		if (isset($params['sort']) && isset($params['order'])) {			$headers	= array_keys($table_headers);			$sort		= (isset($params['sort']) && in_array(strtolower($params['sort']), $headers)) ? strtolower($params['sort']) : $headers[0];			$order		= (isset($params['order']) && in_array(strtolower($params['order']), $sorts)) ? strtolower($params['order']) : $sorts[0];			$order_by	= array($sort	=> $order);			$base_url	= 'admin-cp/'.$this->_class_name.'/index/sort/' . $params['sort'] . '/order/' . $params['order'] . $page_url;		}		/** Execute list query **/		$field		= isset($filters['f']) ? $filters['f'] : '';		$keyword	= isset($filters['q']) ? $filters['q'] : '';		$where_cond	= isset($where_cond) ? $where_cond : '';		$total_rows		= $this->user->find_count($where_cond);		$total_record 	= $total_rows;		$listings	= $this->user->find($where_cond, $order_by, $per_page, $offset);		/** Store index url **/		if (count($listings) == 0 && $total_rows != 0) {			$page_index	= ceil($total_rows / $per_page);			$this->request->redirect($base_url.$page_index);			return;		}		$this->session->get($this->_module_name.'_index', $base_url.$page_index);		/** Initialize pagination **/		$pagination = Pagination::factory(array(				'total_items' 		=> $total_rows,				'items_per_page' 	=> $per_page,			 )		);		// $where_cond	= array('status !='		=> 'deleted',							// 'level_id >='	=> $this->session->get('level_id'));		// $user_level = $this->user->find($where_cond);		// $buffers = array();		// foreach ($user_level as $level) {			// $buffers[$level->id] = ucfirst($level->name);		// }		// $user_level = $buffers;		/** Views **/		$content_vars		= array('listings'		=> $listings,									'table_headers'	=> $table_headers,									'statuses'		=> $this->statuses,									'user_level'	=> $this->levels,									'search_keys'	=> $this->_search_keys,									'module_name'	=> $this->_module_name,									'module_menu'	=> $this->_module_menu,									'field'			=> $field,									'keyword'		=> $keyword,									'order'			=> $order,									'sort'			=> $sort,									'page_url'		=> $page_url,									'page_index'	=> $offset,									//'params'		=> $params,									'total_record'  => $total_rows,									'pagination'	=> $pagination);		$content			= View::factory('user/backend/'.$this->_module_name.'_index');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content; 	}		public function action_add () {		$fields	= array('name'				=> '',						'email'				=> '',						'password'			=> '',						'confirm_password'	=> '',						'level_id'			=> '',						'user_id'		=> '',						'gender'		=> '',						'about'			=> '',						'country'		=> '',						'state'			=> '',						'city'			=> '',						'address'		=> '',						'postal_code'	=> '',						'birthday'		=> '',						'phone'			=> '',						'fax'			=> '',						'website'		=> '',						'photo'			=> '');		$errors	= $fields;		if ($_POST) {			$post = Validation::factory($_POST)								->rule('name', 'not_empty')					->rule('name', 'min_length', array(':value', 4))					->rule('name', array($this, '_valid_name'), array(':validation', ':field', 'name'))					->rule('email', 'not_empty')					->rule('email', 'Valid::email', array(':value'))					->rule('email', array($this, '_valid_email'), array(':validation', 'email'))					->rule('password', 'not_empty')					->rule('confirm_password', 'not_empty')					->rule('confirm_password', 'matches', array(':validation','confirm_password','password'))					->rule('level_id', array($this, '_valid_level_id'), array(':validation', ':field', 'level_id'))					->rule('birthday', 'not_empty')					->rule('phone', 'not_empty');			if ($post->check()) {				$fields	= $post->as_array();				$params	= array('name'		=> $fields['name'],								'email'		=> $fields['email'],								'password'	=> sha1($fields['password']),								'level_id'	=> $fields['level_id'],								'status'	=> 'active');				$id		= $this->user->add($params);				/** PROFILE **/				$file_name	= '';				$file_mime	= '';				if (isset($_FILES['photo']) && upload::required($_FILES['photo']) && upload::valid($_FILES['photo'])) {					$file_hash	= md5(mktime() + rand(100, 999));					$file_data	= pathinfo($_FILES['photo']['name']);					$file_name	= Lib::_upload_to('photo', $file_hash.'.'.$file_data['extension'], Lib::config($this->_module_name.'.upload_path'), 0755);					$file_data	= pathinfo($file_name);					$file_mime	= $_FILES['photo']['type'];					$file_name	= $file_data['basename'];				}				if (!isset($file_mime) || !isset($file_name)) {					$file_mime	= @$this->profile->file_type;					$file_name	= @$this->profile->file_name;				}				$params = array(								'user_id'		=> $id,								'gender'		=> $fields['gender'],								'about'			=> $fields['about'],								'country'		=> $fields['country'],								'state'			=> $fields['state'],								'city'			=> $fields['city'],								'address'		=> $fields['address'],								'postal_code'	=> $fields['postal_code'],								'birthday'		=> $fields['birthday'],								'phone'			=> $fields['phone'],								'fax'			=> $fields['fax'],								'website'		=> $fields['website'],								'file_type'		=> $file_mime,								'file_name'		=> $file_name,								'status'		=>'active');				$this->profile->user_id = $id;				$profile_exists			= $this->profile->load();				if (!$profile_exists) {					$params_id = $this->profile->add($params);				} else {					foreach ($params as $var => $val) {						$this->profile->$var	= $val;					}					$this->profile->update();					$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$this->profile->user_id);					return;				}				if (isset($fields['add_another'])) {					$this->request->redirect('admin-cp/'.$this->_class_name.'/add');					return;				}				$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$id);				return;			} else {								$fields		= Arr::overwrite($fields, $post->as_array());				$errors 	= Arr::overwrite($errors, $post->errors('validation'));				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '') {						$buffers[$row_key]	= Lib::config('admin.error_field_open').ucfirst($row_val).Lib::config('admin.error_field_close');					} else {						$buffers[$row_key]	= $row_val;					}				}				$errors		= $buffers;			}		}		/** Views **/		$content_vars		= array(								'errors'	=> $errors,								'fields'	=> $fields,								'levels'	=> $this->levels,								'statuses'	=> $this->statuses,								'genders'	=> $this->_genders,								'module_name' 	=> $this->_module_name,								'module_menu'	=> $this->_module_menu);		$content			= View::factory($this->_module_name.'/backend/'.$this->_module_name.'_add');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		//$this->template->page_title		= Lib::config('user.title');		$this->template->content		= $content;  	}		public function action_view () {		// Get User Id from url param		$id = $this->id1;		// Set User Id if TRUE		$this->user->id	= $id;		// Set Profile Id if TRUE		$this->profile->user_id	= $id;		// Load Profile if TRUE		$this->profile->load();		// Load User Data if TRUE		if (!$this->user->load()) {			// Redirect to profile if TRUE			$this->request->redirect('admin-cp/'.$this->_module_name.'/index');			return;		}				/** Views **/		$content_vars		= array('user'			=> $this->user,									'profile'		=> $this->profile,									'status'		=> $this->statuses,									'user_level'	=> $this->level->load($this->user->level_id),									'module_menu'	=> $this->_module_menu);		$content			= View::factory($this->_module_name.'/backend/'.$this->_module_name.'_view');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content; 	}		public function action_edit () {		// Get User Id from url param		$id = $this->request->param('id1');		// Set User Id if TRUE		$this->user->id	= $id;		// Check User Profile if TRUE		$this->profile->user_id = $id;		$profile_exists			= $this->profile->load();		if (!$this->user->load()) {			Request::current()->redirect('admin-cp/error/invalid_request');			return;		}		$fields	= array('name'				=> '',						'email'				=> '',						'password'			=> '',						'confirm_password'	=> '',						'level_id'			=> '',						'status'			=> '',						'user_id'		=> '',						'gender'		=> '',						'about'		=> '',						'country'		=> '',						'state'			=> '',						'city'			=> '',						'address'		=> '',						'postal_code'	=> '',						'birthday'		=> '',						'phone'			=> '',						'fax'			=> '',						'website'		=> '',						'photo'			=> '');		$errors	= $fields;		if ($_POST) {			$post	= new Validation($_POST);					$post->rule('name', 'not_empty');					$post->rule('name', 'min_length', array(':value', 4));					$post->rule('email', 'not_empty');					$post->rule('email', 'Valid::email', array(':value'));					$post->rule('email', array($this, '_valid_email'), array(':validation', 'email'));					$post->rule('confirm_password', 'matches', array(':validation','confirm_password','password'));					$post->rule('level_id', array($this, '_valid_level_id'), array(':validation', ':field', 'level_id'));			if ($post->check()) {				$fields	= $post->as_array();				$this->user->name		= $fields['name'];				$this->user->email		= $fields['email'];				$this->user->level_id	= $fields['level_id'];				$this->user->status		= $fields['status'];				$this->user->update();				if (isset($fields['password']) && $fields['password'] != '')					$this->user->reset_password($fields['password']);				if (isset($fields['delete_photo']) && $fields['delete_photo'] == 1) {					$file_name	= '';					$file_mime	= '';				} else if (isset($_FILES['photo']) && upload::required($_FILES['photo']) && upload::valid($_FILES['photo'])) {					$file_hash	= md5(mktime() + rand(100, 999));					$file_data	= pathinfo($_FILES['photo']['name']);					$file_name	= Lib::_upload_to('photo', $file_hash.'.'.$file_data['extension'], Lib::config($this->_module_name.'.upload_path'), 0755);					$file_data	= pathinfo($file_name);					$file_mime	= $_FILES['photo']['type'];					$file_name	= $file_data['basename'];				}				if (!isset($file_mime) || !isset($file_name)) {					$file_mime	= @$this->profile->file_type;					$file_name	= @$this->profile->file_name;				}				$params = array('user_id'		=> $id,								'gender'		=> $fields['gender'],								'about'			=> $fields['about'],								'country'		=> $fields['country'],								'state'			=> $fields['state'],								'city'			=> $fields['city'],								'address'		=> $fields['address'],								'postal_code'	=> $fields['postal_code'],								'birthday'		=> $fields['birthday'],								'phone'			=> $fields['phone'],								'fax'			=> $fields['fax'],								'website'		=> $fields['website'],								'file_type'		=> $file_mime,								'file_name'		=> $file_name,								'status'		=> $this->user->status);				if (!$profile_exists) {					$params_id = $this->profile->add($params);				} else {					foreach ($params as $var => $val) {						$this->profile->$var	= $val;					}					//print_r($this->profile); exit();					$this->profile->update();					$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$this->user->id);					return;				}				$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$this->user->id);				return;			} else {				$fields		= Arr::overwrite($fields, $post->as_array());				$errors 	= Arr::overwrite($errors, $post->errors('validation'));				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '') {						$buffers[$row_key]	= Lib::config('admin.error_field_open').ucfirst($row_val).Lib::config('admin.error_field_close');					} else {						$buffers[$row_key]	= $row_val;					}				}				$errors		= $buffers;			}		} else {			$fields	= array('name'				=> $this->user->name,							'email'				=> $this->user->email,							'password'			=> '',							'confirm_password'	=> '',							'level_id'			=> $this->user->level_id,							'status'			=> $this->user->status,							'gender' 		=> isset($this->profile->gender) ? $this->profile->gender : '',							'about' 		=> isset($this->profile->about) ? $this->profile->about : '',							'country'		=> isset($this->profile->country) ? $this->profile->country : '',							'state'			=> isset($this->profile->state) ? $this->profile->state : '',							'city'			=> isset($this->profile->city) ? $this->profile->city : '',							'address'		=> isset($this->profile->address) ? $this->profile->address : '',							'postal_code'	=> isset($this->profile->postal_code) ? $this->profile->postal_code : '',							'birthday'		=> isset($this->profile->birthday) ? $this->profile->birthday : '',							'phone'			=> isset($this->profile->phone) ? $this->profile->phone : '',							'fax'			=> isset($this->profile->fax) ? $this->profile->fax : '',							'website'		=> isset($this->profile->website) ? $this->profile->website : '');		}				/** Views **/		$content_vars		= array('errors'		=> $errors,									'fields'		=> $fields,									'genders'		=> $this->_genders,									'module_menu'	=> $this->_module_menu,									'profile'	=> $this->profile,									'levels'	=> $this->levels,									'statuses'	=> $this->statuses,									'user'		=> $this->user);		$content			= View::factory('user/backend/'.$this->_module_name.'_edit');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$this->template->content		= $content; 	}		public function action_delete () {		// Set is_deleted to TRUE		$this->user->id	= $this->id1;		if (!$this->user->load()) {			$this->request->redirect('admin-cp/'.$this->_class_name.'/index');			return;		}		$this->user->status	= 'inactive';		if($this->user->update()){		  echo 1;		}else{		  echo 0;		}		// $redirect_url	= ($this->acl->previous_url != '') ? $this->acl->previous_url : 'admin-cp/'.$this->_class_name.'/index';		// $redirect_url = $this->request->redirect('admin-cp/'.$this->_class_name.'/index');		// $this->request->redirect($redirect_url);		exit();	}		/*** Function Access ***/	// Action for update item status	public function action_change() {			if ($this->request->post('check') !='') {			$rows	= $this->request->post('check');			foreach ($rows as $row) {				// Set id for load				$this->user->id	= $row;				// Set user id for load				$this->profile->user_id	= $row;				if (!$this->user->load())					continue;				// set user status				$this->user->status	= $this->request->post('select_action');				$this->user->update();				if (!$this->profile->load())					continue;				// set profile status				$this->profile->status	= $this->request->post('select_action');				$this->profile->update();				}			$redirect_url	= (strstr($this->acl->previous_url,'admin-cp')) ? $this->acl->previous_url : 'admin-cp/'.$this->_class_name.'/index';			$this->request->redirect($redirect_url);		} else {				$this->request->redirect('admin-cp/'.$this->_class_name);					}	}		/** CALLBACKS **/	public function _valid_email(Validation $array, $field) {		if (empty($array[$field]))			return;		$where_cond = array('status'=>'active','level_id'=>99,'email'=>$array[$field]);		$result = ! Model_User::instance()->find($where_cond,'',1);		if (!$result)			$array->error($field, 'email_exists');	}		public function _valid_name(Validation $array, $field) {		if (empty($array[$field]))			return;		$where_cond = array('status'=>'active','level_id'=>99,'name'=>$array[$field]);		$result = ! Model_User::instance()->find($where_cond,'',1);		if (!$result)			$array->error($field, 'name_exists');	}		public function _unique_username (Validation $array, $field) {		if (!isset($array[$field]))			return;		$member = !Model_User::unique_username($array[$field]);		if ($member)			return $array->error($field, 'unique_name');	}	/*	public function _unique_email ($value) {		//if (!isset($array[$field]))			//return;		$where_cond		= array('email'		=> $value,								'status !='	=> 'deleted');		$email_exists	= ($this->user->find($where_cond) != 0);		return $email_exists;		//print_r($email_exists); exit();		if ($email)			return $array->error($field, 'unique_email');	}	*/		public function _unique_email (Validation $array, $field) {		if (!Valid::email($array[$field]))			return $array->error($field, 'email_exists');	}		public function _valid_level_id (Validation $array, $field) {		$level_check	= $this->user->find(array('level_id'=>$field));		$level_exists	= count($level_check);		if (!$level_exists)			return true;//$array->error($field, 'invalid_level_id');	}		public function _valid_search_key (Validation $array, $field) {		if (!isset($this->_search_keys)) {			$array->add_error($field, 'invalid_search_key');			return;		}		$keys			= array_keys($this->_search_keys);		if (!in_array($array[$field], $keys))			$array->add_error($field, 'invalid_search_key');	}}