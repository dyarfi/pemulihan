<?php defined('SYSPATH') OR die('No direct access allowed.');class Controller_Configuration extends Controller_Backend_BaseAdmin {	protected $_module_name;	protected $_class_name;	protected $_search_keys;	protected $_prefs;	protected $module;	protected $modules;	protected $statuses;		public function __construct () {		parent::__construct();		$this->_module_name		= 'configuration';		$this->_class_name		= strtolower(str_replace('Controller_', '', get_class($this)));		$this->_prefs			= (Kohana::config($this->_module_name.'.'.$this->_class_name.'_fields') !== NULL) ? Kohana::config($this->_module_name.'.'.$this->_class_name.'_fields') : array();		$this->module			= new Module_List_Model();		$this->modules			= $this->module->find();		$user_level				= new User_Level_Model();		$this->user_level		= $user_level->find();		unset($user_level);	}		function index () {		if ($_POST) {			foreach($this->user_level as $level) {				eval("\$level_id_field = 'level_id_$level->id';");				if(isset($_POST['level_id_'.$level->id])) {					$fields	= $_POST['level_id_'.$level->id];					foreach($this->modules as $row) {						if(isset($fields[$row->id])) {							$parent_id	= $this->module->parent_level_module($row->id);							if($parent_id != 0) {								$this->module->id	= $parent_id;								if (!$this->module->load())									continue;								$this->module->$level_id_field	= 1;								$this->module->update();							}							$value	= 1;						} else {							$value	= 0;						}						$this->module->id				= $row->id;						if (!$this->module->load())							continue;						$this->module->$level_id_field	= $value;						$this->module->update();					}				}			}		}		/** Table sorting **/		$table_headers	= array('module_name'	=> 'Module',								'module_link'	=> 'Link');		foreach($this->user_level as $row) {			$table_headers['level_id_'.$row->id]	= ucwords($row->name);		}		/** Execute list query **/		$order_by	= array('id'	=> 'ASC');		$total_rows	= count($this->module->find());		$listings	= $this->module->find(array(), $order_by);		/** Views **/		$content_vars		= array('listings'		=> $listings,									'user_level'	=> $this->user_level,									'table_headers'	=> $table_headers);		$content			= new View('admin-cp/pages/'.$this->_class_name.'_index');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$view				= new View('admin-cp/base_admin');		$view->title		= ucwords(str_replace('_', ' ', $this->_class_name)).' Listings';		$view->content		= $content;		$view->render(TRUE);	}		public function add () {		$fields	= array('parent_id'			=> '',						'name'				=> '',						'title'				=> '',						'description'		=> '',						'order'				=> '',						'status'			=> '');		$errors	= $fields;		if ($_POST) {			$post	= new Validation($_POST);			$post->pre_filter('trim', 'name', 'subject');			$post->pre_filter('intval', 'parent_id', 'order');			$post->add_rules('name', 'required');			$post->add_rules('parent_id', 'required');			$post->add_rules('title', 'required');			$post->add_rules('order', 'required', 'numeric');			$post->add_rules('status', 'required');			$post->add_callbacks('name', array($this, '_unique_name'));			$post->add_callbacks('parent_id', array($this, '_valid_parent_id'));			$post->add_callbacks('status', array($this, '_valid_status'));			if ($post->validate()) {				$fields	= $post->as_array();				if ($fields['parent_id'] != 0) {					$parent		= $this->module->load($fields['parent_id']);					$sub_level	= $parent->sub_level + 1;					unset($parent);				} else {					$sub_level	= 0;				}				$where_cond	= array('parent_id'	=> $fields['parent_id']);				$last_order	= $this->module->find_count($where_cond) + 1;				if ($fields['order'] < $last_order) {					$where_cond	= array('parent_id'	=> $fields['parent_id'],										'order >='	=> $fields['order'],										'status !='	=> 'deleted');					$modules	= $this->module->find($where_cond);					foreach ($modules as $row) {						$row->order	= $row->order + 1;						$row->update();					}					unset($modules);				}				$params	= array('parent_id'		=> $fields['parent_id'],								'name'			=> $fields['name'],								'title'			=> $fields['title'],								'description'	=> $fields['description'],								'sub_level'		=> $sub_level,								'order'			=> $fields['order'],								'status'		=> $fields['status']);				$id		= $this->module->add($params);				if (isset($fields['add_another'])) {					$this->request->redirect('admin-cp/'.$this->_class_name.'/add');					return;				}				$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$id);				return;			} else {				$fields		= arr::overwrite($fields, $post->as_array());				$errors 	= arr::overwrite($errors, $post->errors());				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '')						$buffers[$row_key]	= Kohana::config('site.error_field_open').Kohana::lang('validation.'.$errors[$row_key]).Kohana::config('site.error_field_close');					else						$buffers[$row_key]	= $row_val;				}				$errors		= $buffers;			}		}		/** Views **/		$content_vars		= array('errors'		=> $errors,									'fields'		=> $fields,									'modules'	=> $this->modules,									'statuses'		=> $this->statuses);		$content			= new View('admin-cp/pages/'.$this->_class_name.'_add');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$view				= new View('admin-cp/base_admin');		$view->title		= 'Add '.ucwords(str_replace('_', ' ', $this->_class_name));		$view->content		= $content;		$view->render(TRUE);	}		public function view ($id = '') {		$this->module->id	= $id;		if (!$this->module->load()) {			$this->request->redirect('admin-cp/'.$this->_class_name.'/error/invalid_request');			return;		}		/** Views **/		if ($this->module->parent_id != 0) {			$parent			= $this->module->load($this->module->parent_id);			$parent			= htmlspecialchars($parent->title, ENT_QUOTES);		} else {			$parent			= 'This module is parent';		}		if ($this->module->order != 1) {			$where_cond		= array('parent_id'	=> $this->module->parent_id,									'order'		=> ($this->module->order));			$modules		= $this->module->find($where_cond, '', 1);			$order			= 'After '.strtolower(str_replace('_', ' ', $this->_class_name)).' '.htmlspecialchars($modules[0]->title, ENT_QUOTES);		} else {			$order			= 'At the beginning';		}		$content_vars		= array('module'	=> $this->module,									'parent'	=> $parent,									'order'		=> $order);		$content			= new View('admin-cp/pages/'.$this->_class_name.'_view');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$view				= new View('admin-cp/base_admin');		$view->title		= 'View '.ucwords(str_replace('_', ' ', $this->_class_name)).' Details';		$view->content		= $content;		$view->render(TRUE);	}		public function edit ($id = '') {		$this->module->id	= $id;		if (!$this->module->load()) {			$this->request->redirect('admin-cp/'.$this->_class_name.'/error/invalid_request');			return;		}		$fields	= array('parent_id'			=> '',						'name'				=> '',						'title'				=> '',						'description'		=> '',						'order'				=> '',						'status'			=> '');		$errors	= $fields;		if ($_POST) {			$post	= new Validation($_POST);			$post->pre_filter('trim', 'name', 'subject');			$post->pre_filter('intval', 'parent_id', 'order');			$post->add_rules('parent_id', 'required');			$post->add_rules('name', 'required', 'alpha_dash');			$post->add_rules('title', 'required');			$post->add_rules('order', 'required', 'numeric');			$post->add_rules('status', 'required');			$post->add_callbacks('parent_id', array($this, '_valid_parent_id'));			$post->add_callbacks('name', array($this, '_unique_name'));			$post->add_callbacks('status', array($this, '_valid_status'));			if ($post->validate()) {				$fields	= $post->as_array();				if ($fields['parent_id'] != 0) {					$parent		= $this->module->load($fields['parent_id']);					$sub_level	= $parent->sub_level + 1;					unset($parent);				} else {					$sub_level	= 0;				}				$order		= ($fields['order'] == 1) ? $fields['order'] : ($fields['order'] - 1);				$where_cond	= array('parent_id'	=> $fields['parent_id']);				$last_order	= $this->module->find_count($where_cond) + 1;				if ($this->module->sub_level != $sub_level) {					$where_cond	= array('parent_id'	=> $this->module->parent_id,										'sub_level'	=> $this->module->sub_level,										'order >='	=> $this->module->order,										'status !='	=> 'deleted');					$orders		= $this->module->find($where_cond);					foreach ($orders as $row) {						$row->order	= $row->order - 1;						$row->update();					}					$where_cond	= array('parent_id'	=> $fields['parent_id'],										'sub_level'	=> $sub_level,										'order >='	=> $order,										'status !='	=> 'deleted');					$orders		= $this->module->find($where_cond);					foreach ($orders as $row) {						$row->order	= $row->order + 1;						$row->update();					}				} else {					if ($this->module->order < $fields['order']) {						$where_cond	= array('parent_id'	=> $fields['parent_id'],											'sub_level'	=> $sub_level,											'order >='	=> $this->module->order,											'order <'	=> $order,										'status !='	=> 'deleted');						$orders		= $this->module->find($where_cond);						foreach ($orders as $row) {							$row->order	= $row->order - 1;							$row->update();						}					} else if ($this->module->order > $fields['order']) {						$where_cond	= array('parent_id'	=> $fields['parent_id'],											'sub_level'	=> $sub_level,											'order >'	=> $order,											'order <='	=> $this->module->order,											'status !='	=> 'deleted');						$orders		= $this->module->find($where_cond);						foreach ($orders as $row) {							$row->order	= $row->order + 1;							$row->update();						}					}				}				unset($orders);				$params	= array('parent_id'		=> $fields['parent_id'],								'name'			=> $fields['name'],								'title'			=> $fields['title'],								'description'	=> $fields['description'],								'sub_level'		=> $sub_level,								'order'			=> $order,								'status'		=> $fields['status']);				foreach ($params as $var => $val) {					$this->module->$var	= $val;				}				$this->module->update();				$this->request->redirect('admin-cp/'.$this->_class_name.'/view/'.$id);				return;			} else {				$fields		= arr::overwrite($fields, $post->as_array());				$errors 	= arr::overwrite($errors, $post->errors());				$buffers	= $errors;				foreach ($errors as $row_key => $row_val) {					if ($row_val != '')						$buffers[$row_key]	= Kohana::config('site.error_field_open').Kohana::lang('validation.'.$errors[$row_key]).Kohana::config('site.error_field_close');					else						$buffers[$row_key]	= $row_val;				}				$errors		= $buffers;			}		} else {			$fields	= array('parent_id'			=> $this->module->parent_id,							'name'				=> $this->module->name,							'title'				=> $this->module->title,							'description'		=> $this->module->description,							'order'				=> $this->module->order,							'status'			=> $this->module->status);		}		/** Views **/		$where_cond			= array('parent_id'		=> $this->module->parent_id);		$orders				= $this->module->find($where_cond);		$content_vars		= array('errors'		=> $errors,									'fields'		=> $fields,									'module'		=> $this->module,									'modules'	=> $this->modules,									'orders'		=> $orders,									'statuses'		=> $this->statuses);		$content			= new View('admin-cp/pages/'.$this->_class_name.'_edit');		foreach ($content_vars as $var => $val) {			$content->$var	= $val;		}		$view				= new View('admin-cp/base_admin');		$view->title		= 'Edit '.ucwords(str_replace('_', ' ', $this->_class_name)).' Details';		$view->content		= $content;		$view->render(TRUE);	}		public function delete ($id = '') {		$this->module->id	= $id;		if (!$this->module->load()) {			$this->request->redirect('admin-cp/error/invalid_request');			return;		}		$this->module->status	= 'deleted';		$this->module->update();		$redirect_url	= ($this->acl->previous_url != '') ? $this->acl->previous_url : 'admin-cp/'.$this->_class_name.'/index';		$this->request->redirect($redirect_url);	}		/** CALLBACKS **/	public function _unique_name (Validation $array, $field) {		if (isset($this->module->name) && $this->module->name == $array[$field])			return;		$where_cond		= array('name'		=> $array[$field],								'status !='	=> 'deleted');		$name_exists	= ($this->module->find_count($where_cond) != 0);		if ($name_exists)			$array->add_error($field, 'name_exists');	}		public function _valid_parent_id (Validation $array, $field) {		if ($array[$field] == 0)			return TRUE;		$where_cond		= array('id'	=> $array[$field]);		$parent_exists	= ($this->module->find_count($where_cond) != 0);		if (!$parent_exists)			$array->add_error($field, 'invalid_parent_id');	}		public function _valid_status (Validation $array, $field) {		if (!in_array($array[$field], $this->statuses))			$array->add_error($field, 'invalid_status');	}}